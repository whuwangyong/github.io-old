[{"categories":["静态网站博客"],"content":" 最好的参考资料仍然是官方。本文仅作一个基本描述 ","date":"2022-04-19","objectID":"/2022-04-19-hugo/:0:0","tags":["hugo","github pages","vercel","netlify"],"title":"使用 Hugo + Github Pages 创建静态网站博客","uri":"/2022-04-19-hugo/"},{"categories":["静态网站博客"],"content":"安装Hugo 在此处下载安装包。有两个版本：（1）hugo；（2）hugo_extended。怎么选？很多功能，包括一些主题，都需要hugo_extended的支持，因此，建议安装hugo_extended。下载之后，解压，将hugo.exe加入环境变量即可。 ","date":"2022-04-19","objectID":"/2022-04-19-hugo/:1:0","tags":["hugo","github pages","vercel","netlify"],"title":"使用 Hugo + Github Pages 创建静态网站博客","uri":"/2022-04-19-hugo/"},{"categories":["静态网站博客"],"content":"创建站点 仅需一个命令： \u003e hugo new site my_blog 站点的目录结构如下： \u003e ls my_blog Mode LastWriteTime Length Name ---- ------------- ------ ---- d----- 2022/4/16 16:32 archetypes d----- 2022/4/16 16:32 content d----- 2022/4/16 16:32 data d----- 2022/4/16 16:32 layouts d----- 2022/4/16 16:32 static d----- 2022/4/16 16:32 themes -a---- 2022/4/16 16:32 82 config.toml 最关键的几个文件/目录: config.toml 配置文件，要定制化的东西几乎全在这里修改。 themes 存放主题的目录。里面可以放一个或多个主题 content 存放博客的目录。后续以markdown格式写的文章，就放在这下面： content/ └── posts/ └── this-is-my-first-blog/ \u003c-- page bundle | ├── index.md | └── sunset.jpg \u003c-- page resource └—— this-is-my-second-blog.md 注意，如果将md文件和引用的图片放在一个文件夹下（官方叫page bundle），则md文件需命令为index.md，否则md在渲染为html后，里面的图片不会显示。 ","date":"2022-04-19","objectID":"/2022-04-19-hugo/:2:0","tags":["hugo","github pages","vercel","netlify"],"title":"使用 Hugo + Github Pages 创建静态网站博客","uri":"/2022-04-19-hugo/"},{"categories":["静态网站博客"],"content":"添加主题 新建的站点是空的，需要添加一个主题后才能正常使用。此处以FixIt主题为例。关于主题的选择，请看下一节主题推荐。 添加主题有两种方式： （1）将主题下载下来，放在themes目录下即可 （2）将主题以子模块的形式添加到站点，使用git管理。这么做主要是便于以后升级。本文采用此方式。关于git submodule的更多信息查看这里：git submodule - 标签 - 武大路飞 (whuwangyong.github.io) 另外，建议不要直接修改主题里面的文件，以后升级时合并起来很麻烦。没什么问题，主题可以一直使用，没必要频繁升级。 \u003e cd my_blog \u003e git init \u003e git submodule add https://github.com/Lruihao/FixIt.git themes/FixIt # 以后可以使用以下命令升级主题 \u003e git submodule update --remote --merge ","date":"2022-04-19","objectID":"/2022-04-19-hugo/:3:0","tags":["hugo","github pages","vercel","netlify"],"title":"使用 Hugo + Github Pages 创建静态网站博客","uri":"/2022-04-19-hugo/"},{"categories":["静态网站博客"],"content":"主题推荐 官网提供了很多主题，我试用了一些，从以下几个角度进行选择： 用的人多，有人维护 侧边栏具备 Markdown 大纲目录 具备评论功能 具备搜索功能 简洁，美观，易用 最后选出了以下几个。 ","date":"2022-04-19","objectID":"/2022-04-19-hugo/:4:0","tags":["hugo","github pages","vercel","netlify"],"title":"使用 Hugo + Github Pages 创建静态网站博客","uri":"/2022-04-19-hugo/"},{"categories":["静态网站博客"],"content":"Stack Stack | Hugo Themes (gohugo.io) 特点： 搜索很快 首页和正文的间距都很大 博客无修改时间 分类与标签的样式是一样的 favicon图标设置：放在hugo-theme-stack/static/img/目录下，修改hugo-theme-stack/config.yaml，设置params.favicon为 /img/your-favicon.ico，注意是/img不是img md图片目录不能以 · 开始。否则渲染之后图片src=\"/“是从根路径开始的，就找不到图片 ","date":"2022-04-19","objectID":"/2022-04-19-hugo/:4:1","tags":["hugo","github pages","vercel","netlify"],"title":"使用 Hugo + Github Pages 创建静态网站博客","uri":"/2022-04-19-hugo/"},{"categories":["静态网站博客"],"content":"Bootstrap Bootstrap Theme for Personal Blog and Documentations | Hugo Themes (gohugo.io) 这个主题的特点是，默认采用的posts layout，这个布局下面的文章，侧边栏的TOC目录是不固定的。如果需要固定，请使用docs layout。 This theme provides several kinds of layouts, such as posts and docs. Our documentations uses the docs layout. If you’re looking for an example that using posts layout, please take a look at Markdown Syntax. ——from：Docs Layout - Hugo Bootstrap (razonyang.com) 优点 页面控件支持超宽布局 代码控件支持超长代码折叠 Docs Layout 可以方便的将整个知识库放上去，这样本地的分类目录就能直接给博客使用，博客无需关心分类、标签的问题。 ","date":"2022-04-19","objectID":"/2022-04-19-hugo/:4:2","tags":["hugo","github pages","vercel","netlify"],"title":"使用 Hugo + Github Pages 创建静态网站博客","uri":"/2022-04-19-hugo/"},{"categories":["静态网站博客"],"content":"LoveIt dillonzq/LoveIt: ❤️A clean, elegant but advanced blog theme for Hugo 一个简洁、优雅且高效的 Hugo 主题 (github.com) 搜索 LoveIt主题支持\"lunr\"和\"algolia\"两种搜索： lunr： 简单，配置type = \"lunr\"即可。运行hugo会将生成的index.json索引文件放在public/目录下，随网站一起发布。没有 contentLength 的限制，但占用带宽大且性能低 (特别是中文需要一个较大的分词依赖库)。客户端需将整个index.json从网站下载到本地，然后基于此文件进行搜索。下图是使用lunr搜索时，生成的静态文件，可见分词库有3.6MB： ​algolia：高性能并且占用带宽低，但需要将 index.json 上传到algolia官网（手动或使用Algolia Atomic脚本）；有 contentLength 的限制。对于免费用户：Your first 10,000 records are free, and every month you’ll receive 10,000 requests for our Search and Recommend products. 经过测试，lunr导致网站加载速度变慢，且搜索效果很不理想。所以我选择了algolia。配置如下：注意 index = \"new-index-1649076215\"，后面的值是你在algolia网站上创建的索引名。 [params.search]enable = true# 搜索引擎的类型 (\"lunr\", \"algolia\")type = \"algolia\"# 文章内容最长索引长度contentLength = 4000# 搜索框的占位提示语placeholder = \"\"# 最大结果数目maxResultLength = 10# 结果内容片段长度snippetLength = 50# 搜索结果中高亮部分的 HTML 标签highlightTag = \"em\"# 是否在搜索索引中使用基于 baseURL 的绝对路径absoluteURL = false[params.search.algolia]# 这里填写你在algolia上面创建的索引名index = \"new-index-1649076215\"appID = \"YMLXXXXFHL\"searchKey = \"9028b251fe4eexxxxxxxxxxxxx5a4f0\" 多语言 所有写在[languages]外面的，都是所有语言公用的。Multilingual Mode | Hugo (gohugo.io)。我去故意掉了多语言，只保留了中文：将[languages.zh-cn]下面的所有配置挪到外面，然后删除空的[languages]块。 使用本地资源 有三种方法来引用图片和音乐等本地资源: 使用页面包中的页面资源. 你可以使用适用于 Resources.GetMatch 的值或者直接使用相对于当前页面目录的文件路径来引用页面资源。所谓的页面包，就是图片和md文件放在一起（使用相对路径访问）。 将本地资源放在 assets 目录中, 默认路径是 /assets. 引用资源的文件路径是相对于 assets 目录的. 将本地资源放在 static 目录中, 默认路径是 /static. 引用资源的文件路径是相对于 static 目录的. 引用的优先级符合以上的顺序. 在这个主题中的很多地方可以使用上面的本地资源引用, 例如 链接 , 图片 , image shortcode, music shortcode 和前置参数中的部分参数. 页面资源或者 assets 目录中的图片处理会在未来的版本中得到支持. 非常酷的功能! Front Matter https://hugoloveit.com/zh-cn/theme-documentation-content/#front-matter 转义字符 https://hugoloveit.com/zh-cn/theme-documentation-content/#escape-character SRI 启用之后在github.io有问题： Failed to find a valid digest in the 'integrity' attribute for resource 'https://whuwangyong.github.io/lib/lunr/lunr.stemmer.support.min.d73a55668c9df0f2cbb2b14c7d57d14b50f71837e9d511144b75347e84c12ff8.js' with computed SHA-256 integrity 'EVRhgSylsJP5vMLxXSaTpskOj+ONq/I3Xl8Y4cNI2Xw='. The resource has been blocked. whuwangyong.github.io/:1 Failed to find a valid digest in the 'integrity' attribute for resource 'https://whuwangyong.github.io/lib/lunr/lunr.zh.min.e9abb2f5c7c0f738290cd8a5ff2ce1cf5deac6942f44ce5dd89c9ab1ae27006a.js' with computed SHA-256 integrity 's6qyS9abdG0o9DP0qC7PoVVqdbpe+fTKorzHq40yfBQ='. The resource has been blocked. whuwangyong.github.io/:1 Failed to find a valid digest in the 'integrity' attribute for resource 'https://whuwangyong.github.io/js/theme.min.09729ab43fbb7b49c065c597d41bb70983c7852ea77794a00b8f78099b049b43.js' with computed SHA-256 integrity '9Rk48wZaQO6EG8tVjkMw4x/SbA6lU0P/+HcLiLAxmjw='. The resource has been blocked. 页面现象就是侧边栏目录、评论都不显示。但是在vercel.app没问题。另外，console还有个warning：Error with Permissions-Policy header: Unrecognized feature: ‘interest-cohort’. LoveIt 总结 优点 文档很详细 默认在新标签页打开链接 可以设置代码超过n行折叠 标题加粗，更加清晰 使用 weight 置顶 ---weight:1# 置顶title:\"主题文档 - 基本概念\"date:2020-03-06T21:40:32+08:00lastmod:2020-03-06T21:40:32+08:00draft:falseauthor:\"Dillon\"authorLink:\"https://dillonzq.com\"description:\"探索 Hugo - LoveIt 主题的全部内容和背后的核心概念.\"resources:- name:\"featured-image\"src:\"featured-image.jpg\"tags:[\"installation\",\"configuration\"]categories:[\"documentation\"]lightgallery:truetoc:auto:false--- 缺点 搜索没有jekyll + chirpy的好，也没有stack的开箱即用。（algolia要自己搞上传，lunr分词有问题）。 主题不太美观 画廊。使用以下语法。不加“图片描述”不会激活。未使用画廊的图片，点击不会响应，只能右键新标签打开，放大查看。还有个小bug，页面刷新后，图变小了。 ![image.png](https://cdn.jsdelivr.net/gh/whuwangyong/whuwangyong.github.io@gh-pages/2022-04-19-hugo/assets/image-20220329160821-l8rh3to.png \"图片描述\") 最重要的，两年没维护了。但这个主题确实不错，所有有不少人fork了一份继续维护。我选择的是Lruihao/FixIt。 ","date":"2022-04-19","objectID":"/2022-04-19-hugo/:4:3","tags":["hugo","github pages","vercel","netlify"],"title":"使用 Hugo + Github Pages 创建静态网站博客","uri":"/2022-04-19-hugo/"},{"categories":["静态网站博客"],"content":"FixIt Lruihao/FixIt: 🔧 A clean, elegant but advanced blog theme for Hugo 一个简洁、优雅且高效的 Hugo 主题 (github.com) 它的原型基于 LoveIt 主题, LeaveIt 主题 和 KeepIt 主题。 LoveIt 主题 对我们来说是一个很棒的 Hugo 主题，很抱歉的是它的存储库已经停止维护很长一段时间了，所以我重建了一个名为 FixIt 的新主题，这样我可以更好地 Fix It 并使它用户体验更好。 修改了高亮颜色，比LoveIt更素雅好看一些。LoveIt的橙色行内代码太花了 可以更便捷的修改页面宽度，LoveIt的页面略窄 但是，图片刷新之后变小的bug还没解决 几乎可以从LoveIt无缝迁移 其他的就去看官方文档吧。 ","date":"2022-04-19","objectID":"/2022-04-19-hugo/:4:4","tags":["hugo","github pages","vercel","netlify"],"title":"使用 Hugo + Github Pages 创建静态网站博客","uri":"/2022-04-19-hugo/"},{"categories":["静态网站博客"],"content":"Echo https://github.com/forecho/hugo-theme-echo 这个主题未体验，看了下觉得还不错，也列在这里吧。主要是到后面不想再折腾了…… ","date":"2022-04-19","objectID":"/2022-04-19-hugo/:4:5","tags":["hugo","github pages","vercel","netlify"],"title":"使用 Hugo + Github Pages 创建静态网站博客","uri":"/2022-04-19-hugo/"},{"categories":["静态网站博客"],"content":"关于主题选择的总结 我最后的选择是FixIt——LoveIt的继续维护版。 其实我最喜欢的主题是 Chirpy，但这是 Jekyll 的主题。而Jekyll 使用的 Kramdown有问题，我做了很多尝试也无法解决，所以放弃了 Jekyll， 转 Hugo。 没有完美的主题，选择一个基本满足要求的即可。比起不断折腾主题，抓紧时间学习并输出优质内容更重要。另外，如果正在使用的主题有什么缺陷，首先应该仔细阅读官方文档和issue列表，寻找解决方案（这是一种能力），而不是立即去找一个新的主题代替它。因为，可能在换了主题之后，我发现新的主题在其他地方也有缺陷，最终落入“主题大师”的陷阱——在N个主题里面反复横跳，流于表面，没有任何定制或者解决问题的能力。 ","date":"2022-04-19","objectID":"/2022-04-19-hugo/:4:6","tags":["hugo","github pages","vercel","netlify"],"title":"使用 Hugo + Github Pages 创建静态网站博客","uri":"/2022-04-19-hugo/"},{"categories":["静态网站博客"],"content":"运行示例站点 添加主题后，主题一般都带有示例站点，在exampleSite目录下。将exampleSite目录下的所有文件拷贝到站点目录下（my_blog）。然后使用如下命令启动： hugo server 访问localhost:1313即可查看效果。 如果报错“Twitter timeout”之类的，是因为示例站点里面有些shortcode会连接twitter/YouTube之类的东西，国内连不上。删掉相应文件即可。 ","date":"2022-04-19","objectID":"/2022-04-19-hugo/:5:0","tags":["hugo","github pages","vercel","netlify"],"title":"使用 Hugo + Github Pages 创建静态网站博客","uri":"/2022-04-19-hugo/"},{"categories":["静态网站博客"],"content":"自定义配置 配置文件是config.toml或config.yaml，有详细注释。另外，演示站点一般也是主题的说明文档，有不明白的配置项，可以在演示站点上查阅，很方便。 ","date":"2022-04-19","objectID":"/2022-04-19-hugo/:6:0","tags":["hugo","github pages","vercel","netlify"],"title":"使用 Hugo + Github Pages 创建静态网站博客","uri":"/2022-04-19-hugo/"},{"categories":["静态网站博客"],"content":"新建文章 直接在content/posts目录下新建xxx.md即可。或者使用page bundle模式，将index.md和引用的图片放在同一文件夹。 也可以使用hugo new posts命令新建，posts来源于主题提供的模板。如FixIt主题提供了以下模板： \u003e ls .\\themes\\FixIt\\archetypes\\ Mode LastWriteTime Length Name ---- ------------- ------ ---- d----- 2022/4/14 21:02 post-bundle -a---- 2022/4/14 21:02 151 default.md -a---- 2022/4/14 21:02 1044 friends.md -a---- 2022/4/14 21:02 179 offline.md -a---- 2022/4/14 21:02 633 posts.md ","date":"2022-04-19","objectID":"/2022-04-19-hugo/:7:0","tags":["hugo","github pages","vercel","netlify"],"title":"使用 Hugo + Github Pages 创建静态网站博客","uri":"/2022-04-19-hugo/"},{"categories":["静态网站博客"],"content":"渲染 在站点目录下运行hugo命令即可。渲染之后的静态文件位于public目录下。将该目录下的所有文件放在一个http服务器下面，即可提供服务。比如，在public目录下，使用python命令运行一个http服务器： \u003e python -m http.server Serving HTTP on :: port 8000 (http://[::]:8000/) ... 然后浏览器访问localhost:8000即查看该站点。 ","date":"2022-04-19","objectID":"/2022-04-19-hugo/:8:0","tags":["hugo","github pages","vercel","netlify"],"title":"使用 Hugo + Github Pages 创建静态网站博客","uri":"/2022-04-19-hugo/"},{"categories":["静态网站博客"],"content":"发布到github pages 将上述渲染的结果——public目录下的所有文件，提交到username.github.io这个repo，即可发布到github pages。 ","date":"2022-04-19","objectID":"/2022-04-19-hugo/:9:0","tags":["hugo","github pages","vercel","netlify"],"title":"使用 Hugo + Github Pages 创建静态网站博客","uri":"/2022-04-19-hugo/"},{"categories":["静态网站博客"],"content":"进阶内容 ","date":"2022-04-19","objectID":"/2022-04-19-hugo/:10:0","tags":["hugo","github pages","vercel","netlify"],"title":"使用 Hugo + Github Pages 创建静态网站博客","uri":"/2022-04-19-hugo/"},{"categories":["静态网站博客"],"content":"发布到netlify、vercel netlify、vercel 支持编译hugo源文件。因此，你可以直接提交my_blog下面的hugo源文件（包括你写的md文件、hugo相关的配置、主题文件等等，不包括渲染后的public/和渲染时生成的resources/）到github的一个repo，然后将该repo关联到netlify、vercel，它们将会自动渲染并发布到它们的网站下。本站有相关文章，可以查看netlify、vercel标签。 ","date":"2022-04-19","objectID":"/2022-04-19-hugo/:10:1","tags":["hugo","github pages","vercel","netlify"],"title":"使用 Hugo + Github Pages 创建静态网站博客","uri":"/2022-04-19-hugo/"},{"categories":["静态网站博客"],"content":"脚本化处理 我写了一个python脚本来做渲染、发布等事情，供参考。 ","date":"2022-04-19","objectID":"/2022-04-19-hugo/:10:2","tags":["hugo","github pages","vercel","netlify"],"title":"使用 Hugo + Github Pages 创建静态网站博客","uri":"/2022-04-19-hugo/"},{"categories":["静态网站博客"],"content":"提交到Google/百度/Bing等搜索引擎 可以使用在config.toml中填写对应的配置；也可以将Google/百度等提供的验证html文件放在站点的static目录下。渲染后，这些验证html文件会出现在public/目录下。public/发布之后，它们就位于网站的根目录了，搜索引擎来抓取的时候就可以验证。 同样位于根目录的还有sitemap.xml，这是网站地图，便于搜索引起爬取内容。另外，百度/Bing还提供了提交url地址的api。当你发布新文章后，可以手动或写脚本将url提交到搜索引擎，使文章更快地被收录。 ","date":"2022-04-19","objectID":"/2022-04-19-hugo/:10:3","tags":["hugo","github pages","vercel","netlify"],"title":"使用 Hugo + Github Pages 创建静态网站博客","uri":"/2022-04-19-hugo/"},{"categories":["静态网站博客"],"content":"Tips ","date":"2022-04-19","objectID":"/2022-04-19-hugo/:11:0","tags":["hugo","github pages","vercel","netlify"],"title":"使用 Hugo + Github Pages 创建静态网站博客","uri":"/2022-04-19-hugo/"},{"categories":["静态网站博客"],"content":"文章需要通过文件夹进行分类吗 在写了一些文章后，自然诞生出分类的想法。比如建站相关的，放在“建站”文件夹下；kafka相关的，放在“kafka”目录下。 ​我的建议是不要这样做。因为分类是一个很难的事情，随着时间推移大概率会动态调整。调整之后意味着之前发布的博客的url失效。这对于SEO是很不利的，好不容易有个用户搜到了你的博客，一点进来却是404。 类似的，posts目录下的文件名、目录名，一经发布就不要改动。文章的标题和分类可以通过Front Matter修改： ---title:\"使用Jekyll + Github Pages搭建静态网站\"date:2022-03-29tags:[\"jekyll\",\"kramdown\",\"github pages\"]categories:[\"静态网站博客\"]--- ","date":"2022-04-19","objectID":"/2022-04-19-hugo/:11:1","tags":["hugo","github pages","vercel","netlify"],"title":"使用 Hugo + Github Pages 创建静态网站博客","uri":"/2022-04-19-hugo/"},{"categories":["静态网站博客"],"content":"hugo时区问题导致文章未显示 比如现在时间是2022-04-19 0:56，我要发一篇文章，Front Matter写为： ---title:\"使用 Hugo + Github Pages 创建静态网站博客\"date:2022-04-19tags:[\"hugo\"]--- date字段我一般只写日期，不写时间。好，现在问题来了，hugo server一把，发现该文章未显示。这是因为hugo默认时区比中国时间慢8小时，当前还是4月18日。解决办法有4个： 将date字段写详细：date: 2022-04-19T00:56:00+08:00 修改config.toml，添加一行配置，执行可以编译未来的文章：buildfuture = true 使用hugo server --buildFuture或hugo --buildFuture命令 修改config.toml，添加一行配置，指定时区：timezone = \"Asia/Shanghai\" ","date":"2022-04-19","objectID":"/2022-04-19-hugo/:11:2","tags":["hugo","github pages","vercel","netlify"],"title":"使用 Hugo + Github Pages 创建静态网站博客","uri":"/2022-04-19-hugo/"},{"categories":["静态网站博客"],"content":"推荐采用方法（4）。 本文同步发布于： https://whuwangyong.github.io/2022-04-19-hugo/ https://whuwangyong.netlify.app/2022-04-19-hugo/ https://whuwangyong.vercel.app/2022-04-19-hugo/ ","date":"2022-04-19","objectID":"/2022-04-19-hugo/:12:0","tags":["hugo","github pages","vercel","netlify"],"title":"使用 Hugo + Github Pages 创建静态网站博客","uri":"/2022-04-19-hugo/"},{"categories":["静态网站博客"],"content":"关键字：disable Vercel bot; disable Preview Deployments Vercel是一个支持部署前端框架和静态网站的平台。你可以方便的把 Github Pages 上面的站点导入Vercel，这样做有两个好处： 有些地区有些时候，Vercel上面的站点比Github Pages上的访问速度快； Github Pages 屏蔽了百度的爬虫，因此你的博客不能被百度检索到。但 Vercel 是可以的。 使用了一段时间的Vercel，发现有两个地方需要调整。 ","date":"2022-03-31","objectID":"/2022-03-31-vercel-disable-comments-and-preview-deployments/:0:0","tags":["vercel"],"title":"Vercel关闭评论 禁止Preview Deployments","uri":"/2022-03-31-vercel-disable-comments-and-preview-deployments/"},{"categories":["静态网站博客"],"content":"关闭评论 每次提交后，vercel bot会在该commit下评论： 这造成了大量的github通知和邮件通知： 如何关闭？在站点根目录新增vercel.json文件，内容如下： { \"github\": { \"silent\": true } } ","date":"2022-03-31","objectID":"/2022-03-31-vercel-disable-comments-and-preview-deployments/:1:0","tags":["vercel"],"title":"Vercel关闭评论 禁止Preview Deployments","uri":"/2022-03-31-vercel-disable-comments-and-preview-deployments/"},{"categories":["静态网站博客"],"content":"禁止Preview Deployments 另一个需要关闭的就是Preview Deployments（与我而言）。我的站点没有预览的必要，都是直接build main分支然后上production。Preview Deployments 构建的是gh-pages分支，可能是我哪里没弄对，这个分支一直无法build成功。如下图，2小时过去了还没结束，然后我手动取消了。 因此，我禁止了Preview Deployments，直允许Production Deployments。操作如下： Project Settings -\u003e Git -\u003e Ignored Build Step，在 COMMAND 填入 [ \"$VERCEL_ENV\" != production ]。 ​","date":"2022-03-31","objectID":"/2022-03-31-vercel-disable-comments-and-preview-deployments/:2:0","tags":["vercel"],"title":"Vercel关闭评论 禁止Preview Deployments","uri":"/2022-03-31-vercel-disable-comments-and-preview-deployments/"},{"categories":["静态网站博客"],"content":"Reference How do I prevent the Vercel for GitHub integration comments? – Vercel Docs Using Vercel without preview deployments (codejam.info) 本文同步发布于： https://whuwangyong.github.io/20220-03-31-vercel-disable-comments-and-preview-deployments/ https://whuwangyong.netlify.app/20220-03-31-vercel-disable-comments-and-preview-deployments/ https://whuwangyong.vercel.app/20220-03-31-vercel-disable-comments-and-preview-deployments/ ","date":"2022-03-31","objectID":"/2022-03-31-vercel-disable-comments-and-preview-deployments/:3:0","tags":["vercel"],"title":"Vercel关闭评论 禁止Preview Deployments","uri":"/2022-03-31-vercel-disable-comments-and-preview-deployments/"},{"categories":null,"content":"最近学习使用 Hugo 构建静态网站。安装主题时，接触到git submodule这个命令，踩了些坑，总结一下。 ","date":"2022-03-29","objectID":"/2022-03-29-github-submodule/:0:0","tags":["git submodule"],"title":"Github SubModule 指南","uri":"/2022-03-29-github-submodule/"},{"categories":null,"content":"子模块与父模块如何同步更新 子模块是一个单独的项目，commit push等操作需要在子模块自己的repo目录下操作。父项目的操作与子模块无关。父项目git add无法添加子模块的changes，当然也就无法commit push。 子模块版本升级后，父项目不会自动升级，仍然停留在对之前版本的引用。以下命令可以查看父模块当前使用子模块的哪个版本： \u003e git submodule status f0dc1cf84d7c47dc1625e956f07b37b6c238a3dc themes/hugo-theme-stack (v3.8.0-4-gf0dc1cf) 子模块修改后，父模块虽然无法git add/commit/push，但是git status却可以显示： \u003e git status On branch master Your branch is up to date with 'origin/master'. Changes not staged for commit: (use \"git add ...\" to update what will be committed) (use \"git restore ...\" to discard changes in working directory) modified: themes/hugo-theme-stack (new commits) 这里会让人疑惑，有changes，但是无法add进来。 这是因为，子模块的修改，只能在子模块里面进行commit \u0026 push。 子模块commit \u0026 push之后，父模块不会自动更新，仍然保持着对子模块上一版本的引用。此时可以使用git add submoduleDir 添加子模块的更新，然后commit \u0026 push，将子模块的修改同步到父模块。 如果父模块在尚未add \u0026 commit \u0026 push子模块更新的情况下，执行了git submoule update，此时子模块会回滚到上一版本（父模块引用的那个版本）。然后去子模块git status，会提示 HEAD detached at xxxxxx。 如果发生了上述情况，可以在子模块git branch -a查看分支，git checkout到上次提交修改的分支。然后子模块就恢复到working tree clean了。 再去父模块，git add submoduleDir \u0026\u0026 commit \u0026\u0026 push。 其他命令： git submodule init git submodule update git submodule status ","date":"2022-03-29","objectID":"/2022-03-29-github-submodule/:1:0","tags":["git submodule"],"title":"Github SubModule 指南","uri":"/2022-03-29-github-submodule/"},{"categories":null,"content":"如何修改子模块的 remote url 需求：使用的别人的主题repo作为子模块。然后改了些地方，发现无法提交到父项目，更不能提交到别人的repo。 解决：fork别人的repo，然后使用自己fork的repo作为子模块。后面原作者的repo更新了，再单独升级fork后的repo。升级时注意别覆盖了自己的修改。如果使用良好，不升级也可。 那么，如何将submodule，从引用别人的repo，改为引用自己的。 ","date":"2022-03-29","objectID":"/2022-03-29-github-submodule/:2:0","tags":["git submodule"],"title":"Github SubModule 指南","uri":"/2022-03-29-github-submodule/"},{"categories":null,"content":"先删除 GIT 未提供submodule remove的功能。要删除一个子模块，需按照下面步骤操作： git submodule deinit sub/module，执行后模块目录将被清空。 git rm sub/module，执行后会清除.gitmodules里的项目。 git commit -m ‘remove sub/module。 第一步不做似乎也没关系。第二步是关键，这里不能直接rm sub/module，这样不会同步更新.gitmodules的内容。 ","date":"2022-03-29","objectID":"/2022-03-29-github-submodule/:2:1","tags":["git submodule"],"title":"Github SubModule 指南","uri":"/2022-03-29-github-submodule/"},{"categories":null,"content":"再添加 git submodule add https://github.com/whuwangyong/hugo-theme-stack/ themes/hugo-theme-stack 如果遇到如下错误： A git directory for ‘hugo-theme-stack’ is found locally with remote(s): origin https://github.com/CaiJimmy/hugo-theme-stack/ If you want to reuse this local git directory instead of cloning again from https://github.com/CaiJimmy/hugo-theme-stack/ use the ‘–force’ option. If the local git directory is not the correct repo or you are unsure what this means choose another name with the ‘–name’ option. 需删除本地的缓存： git rm --cached sub/module 或直接删除站点根目录的.git/module/下面对应的子模块： rm -rf .git/module/hugo-theme-stack 然后再次执行git submodule add。 ","date":"2022-03-29","objectID":"/2022-03-29-github-submodule/:2:2","tags":["git submodule"],"title":"Github SubModule 指南","uri":"/2022-03-29-github-submodule/"},{"categories":null,"content":"Reference GIT 的 SUBMODULE - 阅微堂 (zhiqiang.org) git submodule删除后重新添加问题_Week Mao的专栏-CSDN博客 来说说坑爹的 git submodule - 掘金 (juejin.cn) 本文同步发布于： https://whuwangyong.github.io/2022-03-29-github-submodule/ https://whuwangyong.netlify.app/2022-03-29-github-submodule/ https://whuwangyong.vercel.app/2022-03-29-github-submodule/ ","date":"2022-03-29","objectID":"/2022-03-29-github-submodule/:3:0","tags":["git submodule"],"title":"Github SubModule 指南","uri":"/2022-03-29-github-submodule/"},{"categories":null,"content":"本文首发V2EX。 这段时间试用了好多笔记软件，我本来就是个选择困难症，一个个试下来，愁死我了。 分享一下我的一些阶段性结论。 ","date":"2022-03-29","objectID":"/2022-03-08-notesapp_benchmark/:0:0","tags":["为知笔记","有道云笔记","思源笔记","logseq","双链笔记","obsidian","joplin","语雀"],"title":"云笔记软件简评","uri":"/2022-03-08-notesapp_benchmark/"},{"categories":null,"content":"有道 缺点： 编辑器有问题，Ctrl+Home/End无法跳转、table键无法切换单元格、光标移动慢等问题 富文本不能导出md（这是我想放弃它的唯一原因） 新旧版本笔记不兼容，所以里面有两个编辑器 加密文件夹里面的笔记居然可以通过搜索直接显示！ 有些bug简直是feature了，5年不修：关机时提示“内存无法read”的错误，导致PC关机失败。（最新重构后的7.x版本才解决这个问题） 修bug很慢。反馈了之后很久没变化 优点： 免费（我用的早，有25G空间了） 微信收藏 支持plantuml！ 稳定，没丢过数据 有道是我的主力笔记软件，2000多篇，800MB左右（所以3G空间其实也够用） ","date":"2022-03-29","objectID":"/2022-03-08-notesapp_benchmark/:0:1","tags":["为知笔记","有道云笔记","思源笔记","logseq","双链笔记","obsidian","joplin","语雀"],"title":"云笔记软件简评","uri":"/2022-03-08-notesapp_benchmark/"},{"categories":null,"content":"为知 缺点 表格插入列的时候，鼠标上的提示有一定几率显示为“插入行” WizNote X 现在 md 笔记不需要添加.md 后缀了，但是在 app 上，md 格式的笔记如果没有 md 后缀，会直接以 md 语法的文本显示，不会渲染。手动添加.md 后缀正常渲染，但是手动添加的这个后缀在 PC 上是看不到的 笔记的格式不统一。单独的WizLite写的 md 虽然可以同步到一个账号，但是跟直接在WizNote X里面的笔记不同。网页剪藏的md笔记，会提示升级为md，但它本来就是md啊。反正为知笔记的格式我一直没太搞清楚。 app无法点开图片（即无法放大看） 反馈不通畅。邮件、官网的兔小巢、贴吧都反馈了bug，没有回复 产品很好，但是让我觉得要被放弃了 优点： 60/年不贵 网页剪藏最厉害 微信收藏最厉害（有道需在app打开一下那个笔记才能收藏，否则内容就是个url。为知不用，微信发给公众号就行） 完美导入/导出md。完美指的是导入md时，能把图片上传到wiz服务器；导出时能把图片导出且和md文件同一文件夹 支持私有部署（私有部署不能使用网页收藏、微信收藏） ","date":"2022-03-29","objectID":"/2022-03-08-notesapp_benchmark/:0:2","tags":["为知笔记","有道云笔记","思源笔记","logseq","双链笔记","obsidian","joplin","语雀"],"title":"云笔记软件简评","uri":"/2022-03-08-notesapp_benchmark/"},{"categories":null,"content":"Joplin 缺点 编辑器不行；虽然可以调用外部 Typora 打开，但是插入的图片不在 Joplin 的数据库里面 有个大纲插件，但是简陋：每次打开都占1/2宽的屏幕，即使调整了也记不住位置 没有微信收藏（现在公众号还是很多优质内容的） 优点： 开源，稳定 可以导出md（但是其图片不是放在md文件同一目录，而是上级目录。所有md使用的图片混在一个目录） 支持私有部署（具备网页剪藏） ","date":"2022-03-29","objectID":"/2022-03-08-notesapp_benchmark/:0:3","tags":["为知笔记","有道云笔记","思源笔记","logseq","双链笔记","obsidian","joplin","语雀"],"title":"云笔记软件简评","uri":"/2022-03-08-notesapp_benchmark/"},{"categories":null,"content":"思源 缺点： 虽然版本更新很快，但是bug还是多（好在反馈通道很通畅） 单独说一下目前存在的隐藏大bug：容易触发“状态异常”，然后只能退出软件 网页剪藏慢，行为类似手机滚动截图，在浏览器里一屏一屏的滚 优点： 编辑器很强（支持plantuml），距离typora只差一点 搜索功能强大（可以SQL查询） 完美导入/导出md（图片在当前路径，这便于我用hugo构建静态网页） 支持整个笔记本导出md 支持双链和日记 支持私有部署（目前只有x86，arm的镜像还没有），私有部署具备网页剪藏 可玩性强。结合嵌入块、挂件、API等，能玩出花 ","date":"2022-03-29","objectID":"/2022-03-08-notesapp_benchmark/:0:4","tags":["为知笔记","有道云笔记","思源笔记","logseq","双链笔记","obsidian","joplin","语雀"],"title":"云笔记软件简评","uri":"/2022-03-08-notesapp_benchmark/"},{"categories":null,"content":"语雀 缺点： 导出md不能导出图片。官网明确说了不会支持，是为了防盗链 没有网页剪藏和微信收藏 优点： 小记是很好的功能 编辑器功能丰富（支持plantuml） ","date":"2022-03-29","objectID":"/2022-03-08-notesapp_benchmark/:0:5","tags":["为知笔记","有道云笔记","思源笔记","logseq","双链笔记","obsidian","joplin","语雀"],"title":"云笔记软件简评","uri":"/2022-03-08-notesapp_benchmark/"},{"categories":null,"content":"logseq/Obsidian等其他双链笔记 缺点： 编辑器不行，比如表格操作这些差远了（不想折腾第三方插件） logseq导出的是html，无法导出md logseq那种日记方式，尝试之后我不习惯。写日记确实很快，解决了分类的难题。但是整理是避免不了的，整理很麻烦。 关于双链笔记，推荐学习： B站Up主“二一的笔记”的视频 这篇文章：双向链接时代的快速无压记录 · 语雀 (yuque.com) ","date":"2022-03-29","objectID":"/2022-03-08-notesapp_benchmark/:0:6","tags":["为知笔记","有道云笔记","思源笔记","logseq","双链笔记","obsidian","joplin","语雀"],"title":"云笔记软件简评","uri":"/2022-03-08-notesapp_benchmark/"},{"categories":null,"content":"我目前的选择 导出MD是刚需。因为写了很多笔记之后，如果不发布出去，与别人分享交流，那意义不大。如果无法导出MD，发布时会很麻烦。 我目前正在尝试使用思源免费版。电脑之间用 OneDrive 同步，速度快；手机上使用FolderSync，同步速度慢，勉强可以接受。手机上基本就只是看，不会编辑。后面如果笔记多了导致同步太慢，考虑Docker部署。或者换一种同步方式，比如NextCloud。 微信收藏还是用的有道。有道现在充当一个收集箱，绑定微信公众号之后，可以很方便的把文字、图片、文件等扔给有道暂存。 为了选择一个顺手的工具，搭进去了好多的时间。看评测，做测试，还顺带着反馈bug。唉……没有完美的产品，只能找个勉强合适的。 有人说“笔记软件换了一个又一个，笔记却没写几篇”，但愿不要如此，共勉共勉。 本文同步发布于： https://whuwangyong.github.io/2022-03-08-notesapp_benchmark/ https://whuwangyong.netlify.app/2022-03-08-notesapp_benchmark/ https://whuwangyong.vercel.app/2022-03-08-notesapp_benchmark/ ","date":"2022-03-29","objectID":"/2022-03-08-notesapp_benchmark/:0:7","tags":["为知笔记","有道云笔记","思源笔记","logseq","双链笔记","obsidian","joplin","语雀"],"title":"云笔记软件简评","uri":"/2022-03-08-notesapp_benchmark/"},{"categories":["静态网站博客"],"content":"Jekyll 是 Github Pages 官方支持的静态网站生成工具，优点是在可以直接github上使用vscode online编辑md，提交后，github会承担生成html的工作。而使用hugo等工具，需要先在本地将md文件渲染成html，然后上传。 提示 hugo的优点是快！ 虽然github pages只支持渲染Jekyll，但是netlify、vercel等平台支持渲染hugo、jekyll等更多框架。 ","date":"2022-03-29","objectID":"/2022-03-29-jekyll/:0:0","tags":["jekyll","kramdown","github pages","vercel","netlify"],"title":"使用Jekyll + Github Pages搭建静态网站","uri":"/2022-03-29-jekyll/"},{"categories":["静态网站博客"],"content":"主题选择 看了几个jekyll主题，发现 Chirpy 最得我心。在jekyll-template · GitHub Topics下，Chirpy主题排名第二。 本文记录Jekyll和chirpy的搭配使用。 ","date":"2022-03-29","objectID":"/2022-03-29-jekyll/:1:0","tags":["jekyll","kramdown","github pages","vercel","netlify"],"title":"使用Jekyll + Github Pages搭建静态网站","uri":"/2022-03-29-jekyll/"},{"categories":["静态网站博客"],"content":"安装Ruby和Jekyll 前面说了github可以编译Jekyll，为什么还要在本地装一套环境呢。主要是为了方便调试，尤其是刚开始配置主题的时候。 比起Hugo来说，jekyll的安装要麻烦一些，需要安装的东西一大堆： Follow the instructions in the Jekyll Docs to complete the installation of Ruby, RubyGems, Jekyll, and Bundler. Download and install a Ruby+Devkit version from RubyInstaller Downloads. Use default options for installation. Run the ridk install step on the last stage of the installation wizard. This is needed for installing gems with native extensions. You can find additional information regarding this in the RubyInstaller Documentation 第一次接触ruby，完全懵逼，不知道装了些啥，接近1个GB。打印的日志是清新脱俗。 Open a new command prompt window from the start menu, so that changes to the PATH environment variable becomes effective. Install Jekyll and Bundler using gem install jekyll bundler Check if Jekyll has been installed properly: jekyll -v 到这里，本地环境就安装好了。 ","date":"2022-03-29","objectID":"/2022-03-29-jekyll/:2:0","tags":["jekyll","kramdown","github pages","vercel","netlify"],"title":"使用Jekyll + Github Pages搭建静态网站","uri":"/2022-03-29-jekyll/"},{"categories":["静态网站博客"],"content":"Chirpy主题的使用 ","date":"2022-03-29","objectID":"/2022-03-29-jekyll/:3:0","tags":["jekyll","kramdown","github pages","vercel","netlify"],"title":"使用Jekyll + Github Pages搭建静态网站","uri":"/2022-03-29-jekyll/"},{"categories":["静态网站博客"],"content":"Install Creating a New Site 跟着这里操作。简言之，使用其提供的 template repo 创建自己的 repo，命名为\u003cGH_USERNAME\u003e.github.io。 Installing Dependencies 将创建的 repo（\u003cGH_USERNAME\u003e.github.io） clone 到本地，执行： git clone git@github.com:\u003cGH_USERNAME\u003e/\u003cGH_USERNAME\u003e.github.io cd \u003cGH_USERNAME\u003e.github.io bundle 依赖安装完后，生成一个Gemfile.lock文件。 \u003cGH_USERNAME\u003e.github.io里面有一个Gemfile文件，它指定了你想要使用的gem的位置和版本。 bundle命令根据Gemfile文件安装依赖，并将安装的每个依赖的版本，记录在Gemfile.lock文件里。这样，当相同的库或是项目在另一台机器上加载时，运行bundle install将安装完全相同的版本，而不是最新的版本。(在不同的机器上运行不同的版本可能会导致测试失败等等)。简单来说就是保证在不同环境下gem版本相同。 Gemfile.lock文件可以提交到github，让github pages的deploy 脚本也使用相同的版本。但是，由于我是在Windows上运行bundle的，github pages的部署环境是linux。因此，需要运行以下命令，将 x86_64-linux 平台的一些库添加到Gemfile.lock里面（只有几个，多数是跨平台兼容的）： bundle lock --add-platform x86_64-linux ","date":"2022-03-29","objectID":"/2022-03-29-jekyll/:3:1","tags":["jekyll","kramdown","github pages","vercel","netlify"],"title":"使用Jekyll + Github Pages搭建静态网站","uri":"/2022-03-29-jekyll/"},{"categories":["静态网站博客"],"content":"Configuration 主要就是修改如下几个文件： _config.yml timezone:Asia/Shanghaigoogle_site_verification:googledxxxxxxx.html# 去Google Search Console申请，用于google收录avatar:assets/img/avatar/wy-avatar-339x335.jpg# 头像comments:active:utterances# 使用github issue作为文章的评论系统utterances:repo:whuwangyong/whuwangyong.github.io # \u003cgh-username\u003e/\u003crepo\u003eissue_term:title # \u003c url | pathname | title | ...\u003epaginate:20 _tabs/about.md 自定义“关于我”的内容。 favicon 自定义网站图标。将favicon.ico文件放入assets/img/favicons/。Customize the Favicon - Chirpy (cotes.page) _data/share.yml 配置文章的分享选项，如Facebook、微博之类的。 ","date":"2022-03-29","objectID":"/2022-03-29-jekyll/:3:2","tags":["jekyll","kramdown","github pages","vercel","netlify"],"title":"使用Jekyll + Github Pages搭建静态网站","uri":"/2022-03-29-jekyll/"},{"categories":["静态网站博客"],"content":"Writing a New Post Writing a New Post | Chirpy (cotes.page) 在_posts目录下创建YYYY-MM-DD-TITLE.md文件即可，必须按照此格式命名。可以使用子目录，用于分类 图片必须放在/assets/下。最佳实践：放在/assets/img/posts/[YYYY-MM-DD-TITLE]目录下 Front Matter ---title:TITLEdate:YYYY-MM-DD HH:MM:SS +/-TTTT# 2022-01-01 13:14:15 +0800 只写日期也行；不写秒也行；这样也行 2022-03-09T00:55:42+08:00categories:[TOP_CATEGORIE, SUB_CATEGORIE]tags:[TAG] # TAG names should always be lowercaseauthor:# 不写默认就是自己name:Full Namelink:https://example.com# 以下默认falsemath:truemermaid:truepin:true--- 分类 支持多层级。如categories: [Java, Spring, AOP]，最终的分类效果是Java/Spring/AOP，这样就可以复用笔记软件里面设置好的分类。 标签 该主题的作者建议，TAG names should always be lowercase。我猜测这么做的原因是，大小写混用会导致相同含义的标签以多种形式出现，如：VSCode、VScode、vscode。学到了。在我的笔记软件里面，大小写混用的标签正让我苦不堪言。 img_path 当文中很多图片具备共同的前缀时，可以将该前缀提取出来，放在Front Matter。 Liquid Codes 举例：如果你在正文中添加如下内容，则会输出该文章的标题。 {{ page.title }} 更多参考：Liquid 模板语言中文文档 | Liquid 中文网 (bootcss.com) ","date":"2022-03-29","objectID":"/2022-03-29-jekyll/:3:3","tags":["jekyll","kramdown","github pages","vercel","netlify"],"title":"使用Jekyll + Github Pages搭建静态网站","uri":"/2022-03-29-jekyll/"},{"categories":["静态网站博客"],"content":"Running Local Server You may want to preview the site contents before publishing, so just run it by: bundle exec jekyll s # serve, server, s Serve your site locally # 编译命令是 bundle exec jekyll b # build, b Build your site After a while, the local service will be published at http://127.0.0.1:4000 . ","date":"2022-03-29","objectID":"/2022-03-29-jekyll/:3:4","tags":["jekyll","kramdown","github pages","vercel","netlify"],"title":"使用Jekyll + Github Pages搭建静态网站","uri":"/2022-03-29-jekyll/"},{"categories":["静态网站博客"],"content":"Deployment Deploy by Using Github Actions。直接提交到github即可。 ","date":"2022-03-29","objectID":"/2022-03-29-jekyll/:3:5","tags":["jekyll","kramdown","github pages","vercel","netlify"],"title":"使用Jekyll + Github Pages搭建静态网站","uri":"/2022-03-29-jekyll/"},{"categories":["静态网站博客"],"content":"Upgrading 如前文所述，依赖的库及其版本都指定在Gemfile 里面，因此，修改此文件，更新jekyll-theme-chirpy的版本号即可： - gem \"jekyll-theme-chirpy\", \"~\u003e 3.2\", \"\u003e= 3.2.1\" + gem \"jekyll-theme-chirpy\", \"~\u003e 3.3\", \"\u003e= 3.3.0\" And then execute the following command: bundle update jekyll-theme-chirpy As the version upgrades, the critical files (for details, see the Startup Template) and configuration options will change. Please refer to the Upgrade Guide to keep your repo’s files in sync with the latest version of the theme. ","date":"2022-03-29","objectID":"/2022-03-29-jekyll/:3:6","tags":["jekyll","kramdown","github pages","vercel","netlify"],"title":"使用Jekyll + Github Pages搭建静态网站","uri":"/2022-03-29-jekyll/"},{"categories":["静态网站博客"],"content":"发布时间与更新时间 chirpy主题还有个优点：自带文章的更新时间。 ​这就不需要倒腾额外的jekyll插件去实现这个功能了。如gjtorikian/jekyll-last-modified-at: A Jekyll plugin to show the last_modified_at time of a post. (github.com) ","date":"2022-03-29","objectID":"/2022-03-29-jekyll/:3:7","tags":["jekyll","kramdown","github pages","vercel","netlify"],"title":"使用Jekyll + Github Pages搭建静态网站","uri":"/2022-03-29-jekyll/"},{"categories":["静态网站博客"],"content":"添加tab到左侧栏 如新增“友情链接”tab。在_tabs目录下新建links.md: --- title: 友情链接 icon: fas fa-link order: 5 --- 调整order和icon。icon去Font Awesome Icons里面找。然后修改_data/locales/en.yml和_data/locales/zh-CN.yml，在tabs:下添加links: Links和links: 友链，以适配中英文。 ","date":"2022-03-29","objectID":"/2022-03-29-jekyll/:3:8","tags":["jekyll","kramdown","github pages","vercel","netlify"],"title":"使用Jekyll + Github Pages搭建静态网站","uri":"/2022-03-29-jekyll/"},{"categories":["静态网站博客"],"content":"进阶内容 用了两天，对Jekyll + Github Pages 的工作逻辑有了一些理解。 ","date":"2022-03-29","objectID":"/2022-03-29-jekyll/:4:0","tags":["jekyll","kramdown","github pages","vercel","netlify"],"title":"使用Jekyll + Github Pages搭建静态网站","uri":"/2022-03-29-jekyll/"},{"categories":["静态网站博客"],"content":"为什么使用Jekyll可以直接提交md 在\u003cgithub_username\u003e.github.io根目录下，查看.github/workflows/pages-deploy.yml文件： name:'Automatic build'on:push:branches:- mainpaths-ignore:- .gitignore- README.md- LICENSEjobs:continuous-delivery:runs-on:ubuntu-lateststeps:- name:Checkoutuses:actions/checkout@v2with:fetch-depth:0# for posts's lastmod- name:Setup Rubyuses:ruby/setup-ruby@v1with:ruby-version:2.7bundler-cache:true- name:Deployrun:bash tools/deploy.sh 该文件定义了一个workflow：当push代码到main分支时，执行jobs里面定义的动作。最关键的是Deploy这一步，它执行了一个脚本：tools/deploy.sh。这个脚本做的事情，就是执行bundle exec jekyll build -d _site将md文件编译为html，生成静态网站，然后将_site下的内容push到gh-pages分支。到这里就很清楚了，是github帮助我们执行了build操作，将md转换成了html。 在github上查看你的github.io项目，在Actions下面可以看到每次提交新文章时触发的workflows： ​第一个workflow就是上面提到的.github/workflows/pages-deploy.yml，第二个是github pages创建的，可以看到bot标志。点进workflow runs，可以看到执行的日志，根据日志能更加清楚的知道背后的流程。 如果使用hugo建站，github后台并没有hugo的环境，所以不能帮助我们编译md。这就需要我们自己编译好html，然后push到github.io项目。push之后的流程是一样的：由github pages的bot将编译好的静态网站发布到https://\u003cusername\u003e.github.io。 ","date":"2022-03-29","objectID":"/2022-03-29-jekyll/:4:1","tags":["jekyll","kramdown","github pages","vercel","netlify"],"title":"使用Jekyll + Github Pages搭建静态网站","uri":"/2022-03-29-jekyll/"},{"categories":["静态网站博客"],"content":"自定义workflow 修改tools/deploy.sh，在里面加入自己的操作。如：将sitemap提交到百度资源平台。 在tools目录下新建脚本，然后在.github/workflows/pages-deploy.yml里面调用 在.github/workflows/下创建新的workflow 第一个亲测可行，后两个还没研究。 ","date":"2022-03-29","objectID":"/2022-03-29-jekyll/:4:2","tags":["jekyll","kramdown","github pages","vercel","netlify"],"title":"使用Jekyll + Github Pages搭建静态网站","uri":"/2022-03-29-jekyll/"},{"categories":["静态网站博客"],"content":"提交到谷歌/百度等搜索引擎 修改tools/deploy.sh，在里面新增一个函数：在deploy之后，根据生成的 sitemap.xml 创建一个包含所有url的sitemap.txt文件。将该文件提交到百度资源平台。但是GitHub封了百度的爬虫，可以考虑在vercel上也部署一份，让百度去爬vercel。另一种方法是使用反向代理，让百度爬自己的主机，自己的主机去连接github。 至于google和bing，访问 Google Search Console 和 Bing Webmaster Tools 进行设置，添加博客地址之后就等着爬虫光临。 搜狗也可以试一试，GitHub没封搜狗。 # file_name: tools/deploy.sh # 新增 submit_sitemap 函数，在 deploy 之后调用 submit_sitemap() { echo \"------ \u003e\u003e\u003e submit_sitemap ---------\" grep \"\u003cloc\u003e\" sitemap.xml | grep -v 'html' | awk -F '[\u003c \u003e]' '{print $3}' \u003e sitemap.txt curl -H 'Content-Type:text/plain' --data-binary @sitemap.txt \"http://data.zz.baidu.com/urls?site=https://whuwangyong.github.io\u0026token=5os4wCK5ct7kBZRN\" curl -H 'Content-Type:text/plain' --data-binary @sitemap.txt \"http://data.zz.baidu.com/urls?site=https://whuwangyong.vercel.app\u0026token=5os4wCK5ct7kBZRN\" rm -f sitemap.txt echo \"------ submit_sitemap \u003c\u003c\u003c ---------\" } main() { init build # ... deploy submit_sitemap } ","date":"2022-03-29","objectID":"/2022-03-29-jekyll/:4:3","tags":["jekyll","kramdown","github pages","vercel","netlify"],"title":"使用Jekyll + Github Pages搭建静态网站","uri":"/2022-03-29-jekyll/"},{"categories":["静态网站博客"],"content":"netlify、vercel是什么 除了github pages，还有netlify、vercel等也能生成并部署静态网站。它们从\u003cusername\u003e.github.io 的main分支拉取md源文件，然后在自己的资源上运行bundle jekyll exec build，将build之后的html放在它们自己的服务器上，并提供一个域名供你访问这个静态站点。 除了Jekyll，它们还支持Hugo、Hexo、Next.js等多种静态网站构建工具。也就是说，只将github作为一个代码托管平台，里面可以放Jekyll、Hugo等多种构建工具和md文件，netlify和vercel都可以将它们编译为html并发布出去。从这个方面说，它们比github强大。 ","date":"2022-03-29","objectID":"/2022-03-29-jekyll/:4:4","tags":["jekyll","kramdown","github pages","vercel","netlify"],"title":"使用Jekyll + Github Pages搭建静态网站","uri":"/2022-03-29-jekyll/"},{"categories":["静态网站博客"],"content":"Jekyll的Markdown处理器 Jekyll默认的Markdown Processor是kramdown，这与我们常使用的typora、vscode的md解析器不同。kramdown会将pipe字符|解析为table语法。如果正文中有link或者image语法，且文本包含了|字符，需要对其进行转义。下述这种写在代码块里面可以，如果写在正文，就会当成表格了。 [A | B](http://foo.com) [img | 1](http://img.com/1.jpg) 这个问题2014年就有人提了，但是作者一直没修复： Pipes inside image alt text lead to unwanted table output · Issue #135 · gettalong/kramdown (github.com) the conditional probability equation doesn’t display normal · Issue #46 · gettalong/kramdown (github.com) Kramdown bug - pipe character in Markdown link creates a table · Issue #2818 · jekyll/jekyll (github.com) markdown - How do you disable tables in Kramdown? - Stack Overflow 对 Markdown 渲染引擎 kramdown 的几点 hack | 明无梦 (dreamxu.com) Table syntax · Issue #151 · gettalong/kramdown (github.com) Pipe characters in text creates table · Issue #317 · gettalong/kramdown (github.com) Bug - pipe character in Markdown link creates a table · Issue #431 · gettalong/kramdown (github.com) 这是2017年的issue，作者回复说2.x版本会修复，但仍然存在。在kramdown - syntax页面，搜索“Automatic and Manual Escaping”可以查看kramdown所有（可能）需要转义的字符。 所以，如果要继续用kramdown，要么禁用table语法，要么把所有用到|的地方全部转义。这两个我都不会选：不用table不可能；为了适应kramdown修改标准的md语法更不可能。 除了|字符，\u003c\u003e、liquid cldoe语法（{{}}）等也需要转义： jekyll kramdown渲染的htmlimage.png \"\rjekyll kramdown渲染的html\r hugo渲染的htmlimage.png \"\rhugo渲染的html\r jekyll kramdown渲染的htmlimage.png \"\rjekyll kramdown渲染的html\r hugo渲染的htmlimage.png \"\rhugo渲染的html\r 总之要注意的地方挺多，不能毫无顾忌地写markdown。 ","date":"2022-03-29","objectID":"/2022-03-29-jekyll/:4:5","tags":["jekyll","kramdown","github pages","vercel","netlify"],"title":"使用Jekyll + Github Pages搭建静态网站","uri":"/2022-03-29-jekyll/"},{"categories":["静态网站博客"],"content":"更改Jekyll的markdown处理器 鉴于kramdown的上述问题，我尝试给Jekyll换一个Markdown处理器。根据文档Markdown Options - Jekyll，除了kramdown，Jekyll还支持jekyll-commonmark和jekyll-commonmark-ghpages。我分别试用了这两个处理器，问题更多。尤其是jekyll-commonmark-ghpages，其兼容的jekyll版本是3.9.x，与我使用的Chirpy主题（需要jekyll 4.x）不兼容。jekyll-commonmark倒是解决了|的问题，但是代码高亮有问题，有些代码始终无法渲染，花了整整一天翻遍了github也没找到jekyll-commonmark到底应该怎么配置。不负责任的说一句，这就是个坑。 Jekyll也支持自定义处理器，我没尝试。另一个优质主题jekyll-TeXt-theme同样用的kramdown。看来用Jekyll就避免不了kramdown。 ","date":"2022-03-29","objectID":"/2022-03-29-jekyll/:4:6","tags":["jekyll","kramdown","github pages","vercel","netlify"],"title":"使用Jekyll + Github Pages搭建静态网站","uri":"/2022-03-29-jekyll/"},{"categories":["静态网站博客"],"content":"搜索功能 Chirpy主题的作者在这里提到，他使用的是Simple-Jekyll-Search实现的搜索功能。效果不错，速度飞快。 ","date":"2022-03-29","objectID":"/2022-03-29-jekyll/:4:7","tags":["jekyll","kramdown","github pages","vercel","netlify"],"title":"使用Jekyll + Github Pages搭建静态网站","uri":"/2022-03-29-jekyll/"},{"categories":["静态网站博客"],"content":"显示阅读量 使用Google Page Views： Enable Google Page Views | Chirpy (cotes.page) ","date":"2022-03-29","objectID":"/2022-03-29-jekyll/:4:8","tags":["jekyll","kramdown","github pages","vercel","netlify"],"title":"使用Jekyll + Github Pages搭建静态网站","uri":"/2022-03-29-jekyll/"},{"categories":["静态网站博客"],"content":"Reference Getting Started | Chirpy (cotes.page) https://blog.csdn.net/qq_38534524/article/details/108462825 本文同步发布于： https://whuwangyong.github.io/2022-03-29-jekyll/ https://whuwangyong.netlify.app/2022-03-29-jekyll/ https://whuwangyong.vercel.app/2022-03-29-jekyll/ ","date":"2022-03-29","objectID":"/2022-03-29-jekyll/:5:0","tags":["jekyll","kramdown","github pages","vercel","netlify"],"title":"使用Jekyll + Github Pages搭建静态网站","uri":"/2022-03-29-jekyll/"},{"categories":null,"content":"问题描述 有一个配置文件 config： KAFKA_HOME=/home/wy/dev/kafka_2.13-2.6.0 BOOTSTRAP_SERVER=127.0.0.1:9092 另有一个使用该配置文件的脚本 list-topics.sh： #!/bin/bash . config \"$KAFKA_HOME\"/bin/kafka-topics.sh --bootstrap-server \"$BOOTSTRAP_SERVER\" --list 我使用虚拟机Ubuntu挂载Windows分区，执行在Windows环境下编写的脚本，提示： wy@ship:/mnt/hgfs/D/projects/kafka-mate/scripts$ ./list-topics.sh /bin/kafka-topics.sh: No such file or directory13-2.6.0 ","date":"2022-03-13","objectID":"/2022-03-13-linebreak-in-windows-and-linux/:1:0","tags":["换行符"],"title":"Windows和Linux的不同换行符导致脚本执行异常","uri":"/2022-03-13-linebreak-in-windows-and-linux/"},{"categories":null,"content":"解决 找了好久的原因，最终注意到config文件的换行符编码为CRLF。 三种换行符（line separator）： Windows：CRLF(\\r\\n) Unix and macOSLinux：LF(\\n) CLassic Mac OS：CR(\\r)，少见 改为LF后，脚本运行正常。我用的IDEA，在右下角更改： ","date":"2022-03-13","objectID":"/2022-03-13-linebreak-in-windows-and-linux/:2:0","tags":["换行符"],"title":"Windows和Linux的不同换行符导致脚本执行异常","uri":"/2022-03-13-linebreak-in-windows-and-linux/"},{"categories":null,"content":"vim状态栏的[noeol] [dos]是什么意思？ 当config的line separator问CRLF时，vim打开Windows分区上的文件时，状态栏显示[noeol][dos]： 当config的line separator问LF时，vim打开Windows分区上的文件时，状态栏显示[noeol]： noeol：no end of line。 如果是Linux分区上的文件，且line separator为LF时，状态栏不会额外显示。 以下内容来自：Vim 编辑器底端 [noeol], [dos] 的含义 - Trekshot - 博客园 (cnblogs.com) 有时使用 Vim 打开一个文件会在窗口底部发现 [noeol], [dos] 提示信息： \"hello-dos.txt\" [noeol][dos] 2L, 10C 1,1 All 这两个符号有何含义？ 直观上理解，‘noeol’ 就是 ‘no end-of-line’, 即“没有行末结束符”， Linux 下的文本编辑器（如 Vim）会在每一行 （包括最后一行）末尾添加一个换行符。比如我们在 Debian 下新建一个名为 ‘hello-unix.txt’ 的文本文件，内容如下： Hello Unix 那么，使用cat -A hello-unix.txt命令可以看到这些换行符： ts@TS:~/www/document$ cat -A hello-unix.txt Hello$ Unix$ ts@TS:~/www/document$ 从中可以清楚地看到每行末尾的 ‘$’ 字符，这就是 Linux 下的“行末结束符”。 下面我们再在 Windows 下创建一个名为 ‘hello-dos.txt’ 记事本文件，内容如下： Hello DOS 在 Debian 下查看此文件的换行符信息： ts@TS:~/www/document$ cat -A hello-dos.txt Hello^M$ DOSts@TS:~/www/document$ 同样是两行，每行一个单词，Windows 和 Linux 下的换行符有两个明显不同： Windows 下的换行符比 Linux 下的多了个 ^M； 最后一行行末没有换行符； 这两个不同之处也正是 [dos], [noeol] 两个 Flag 信息出现的原因。 Windows 下文本文件每行的换行符为“回车+换行”(CRLF,^M$), 而 Linux 下则仅为 “换行” (LF, $). Vim 发现文本中含有 ^M$换行字符判定为 Windows 下创建的 文件，用 [dos] Flag 提示；Vim 没有在最后一行发现换行符，判定此文件不是在 Linux 下创建/编辑，用 [noeol] Flag 提示用户。 ","date":"2022-03-13","objectID":"/2022-03-13-linebreak-in-windows-and-linux/:3:0","tags":["换行符"],"title":"Windows和Linux的不同换行符导致脚本执行异常","uri":"/2022-03-13-linebreak-in-windows-and-linux/"},{"categories":null,"content":"如何消除 [noeol] Flag？ 只需在 Debian 下将该文件重新保存即可，还是上面的 hello-dos.txt 文件，打开它， 不做任何修改直接 :wq保存退出，再查看换行符： ts@TS:~/www/document$ cat -A hello-dos.txt Hello^M$ DOS^M$ ts@TS:~/www/document$ 换行符已经追加上去，这里要注意的是追加的是 Windows 下的换行符（回车+换行） ^M$, 而不是 Linux 下的换行符（换行）$, 因为 Vim 已经发现此文件是在 Windows 下创建的（[dos] Flag），尽管是在 Linux 下编辑，Vim 也会按照文件创建时所在的操作系统下的换行规则添加换行符。 ","date":"2022-03-13","objectID":"/2022-03-13-linebreak-in-windows-and-linux/:3:1","tags":["换行符"],"title":"Windows和Linux的不同换行符导致脚本执行异常","uri":"/2022-03-13-linebreak-in-windows-and-linux/"},{"categories":null,"content":"如何消除 [dos] Flag？ 有两种简单的方法： Linux 下提供有两个命令用来进行 Windows 和 Unix 文件的转化：dos2unix 和 unix2dos; 在 Debian 下使用 touch template.txt 创建一个模板，在 Windows 下创建的任 何文本文件都以此模板为基础； ","date":"2022-03-13","objectID":"/2022-03-13-linebreak-in-windows-and-linux/:3:2","tags":["换行符"],"title":"Windows和Linux的不同换行符导致脚本执行异常","uri":"/2022-03-13-linebreak-in-windows-and-linux/"},{"categories":null,"content":"Reference Vim 编辑器底端 [noeol], [dos] 的含义 - Trekshot - 博客园 (cnblogs.com) 本文同步发布于： https://whuwangyong.github.io/2022-03-13-linebreak-in-windows-and-linux/ https://whuwangyong.netlify.app/2022-03-13-linebreak-in-windows-and-linux/ https://whuwangyong.vercel.app/2022-03-13-linebreak-in-windows-and-linux/ ","date":"2022-03-13","objectID":"/2022-03-13-linebreak-in-windows-and-linux/:4:0","tags":["换行符"],"title":"Windows和Linux的不同换行符导致脚本执行异常","uri":"/2022-03-13-linebreak-in-windows-and-linux/"},{"categories":null,"content":" 官方地址： shadowsocks/shadowsocks-libev: Bug-fix-only libev port of shadowsocks. Future development moved to shadowsocks-rust (github.com) 旧地址，不再更新： shadowsocks/shadowsocks at master (github.com) clowwindy/shadowsocks-libev at master (github.com) 本文基于Ubuntu。 ","date":"2022-03-09","objectID":"/2022-03-09-shadowsocks/:0:0","tags":["shadowsocks","vpn"],"title":"shadowsocks 服务端安装指南","uri":"/2022-03-09-shadowsocks/"},{"categories":null,"content":"install $ sudo apt install shadowsocks-libev ... Created symlink /etc/systemd/system/multi-user.target.wants/shadowsocks-libev.service → /lib/systemd/system/shadowsocks-libev.service. ","date":"2022-03-09","objectID":"/2022-03-09-shadowsocks/:1:0","tags":["shadowsocks","vpn"],"title":"shadowsocks 服务端安装指南","uri":"/2022-03-09-shadowsocks/"},{"categories":null,"content":"Configuration 官方文档说配置文件在这里： Edit your config.json file. By default, it’s located in /usr/local/etc/shadowsocks-libev. 但我的不是。 编辑/etc/shadowsocks-libev/config.json { \"server\":\"0.0.0.0\", \"mode\":\"tcp_and_udp\", \"server_port\":your-port, \"password\":\"your-pass\", \"timeout\":300, \"method\":\"chacha20-ietf-poly1305\" } mode有三种：tcp_only，udp_only，tcp_and_udp。 “server”:“0.0.0.0” //只使用ipv4 “server”:[\"::0\",“0.0.0.0”] //使用ipv6和ipv4 server-port: 这个端口我之前用的443，因为公司网络只给了80和443出口。但是用443的时候很慢或者根本翻不出去，v2RayN日志如下： app/proxyman/outbound: failed to process outbound traffic \u003e proxy/shadowsocks: failed to find an available destination \u003e common/retry: [dial tcp x.x.x.x:443: i/o timeout dial tcp x.x.x.x:443: operation was canceled] \u003e common/retry: all retry attempts failed 换成别的端口如8888就可以了。80没试。 默认的 \"server\":[\"::1\", \"127.0.0.1\"]不行。 删掉了\"local_port\":1080，服务端不需要。 ","date":"2022-03-09","objectID":"/2022-03-09-shadowsocks/:2:0","tags":["shadowsocks","vpn"],"title":"shadowsocks 服务端安装指南","uri":"/2022-03-09-shadowsocks/"},{"categories":null,"content":"加速 Using TCP BBR1 echo net.core.default_qdisc=fq \u003e\u003e /etc/sysctl.conf echo net.ipv4.tcp_congestion_control=bbr \u003e\u003e /etc/sysctl.conf sysctl -p sysctl net.ipv4.tcp_available_congestion_control ","date":"2022-03-09","objectID":"/2022-03-09-shadowsocks/:3:0","tags":["shadowsocks","vpn"],"title":"shadowsocks 服务端安装指南","uri":"/2022-03-09-shadowsocks/"},{"categories":null,"content":"开机启动 sudo systemctl enable shadowsocks-libev.service # 禁用开机启动 sudo systemctl disable shadowsocks-libev.service 官方文档做法： To enable shadowsocks-libev, add the following rc variable to your /etc/rc.conf file: shadowsocks_libev_enable=\"YES\" ","date":"2022-03-09","objectID":"/2022-03-09-shadowsocks/:4:0","tags":["shadowsocks","vpn"],"title":"shadowsocks 服务端安装指南","uri":"/2022-03-09-shadowsocks/"},{"categories":null,"content":"Run Start the Shadowsocks server: systemctrl start shadowsocks-libev.service # 或者 service shadowsocks-libev start ","date":"2022-03-09","objectID":"/2022-03-09-shadowsocks/:5:0","tags":["shadowsocks","vpn"],"title":"shadowsocks 服务端安装指南","uri":"/2022-03-09-shadowsocks/"},{"categories":null,"content":"提示 shadowsocks的服务器在v2rayNG app上无法使用，需使用Shadowsocks app。但是PC上的v2rayN可以使用ss服务器。 本文同步发布于： https://whuwangyong.github.io/2022-03-09-shadowsocks/ https://whuwangyong.netlify.app/2022-03-09-shadowsocks/ https://whuwangyong.vercel.app/2022-03-09-shadowsocks/ ","date":"2022-03-09","objectID":"/2022-03-09-shadowsocks/:6:0","tags":["shadowsocks","vpn"],"title":"shadowsocks 服务端安装指南","uri":"/2022-03-09-shadowsocks/"},{"categories":null,"content":"Using TCP BBR TCP BBR is a TCP congestion control algorithm developed by Google and its been reported to improve performance on certain networks. You can enable it by adding the following to lines to your system configuration file. sudo nano /etc/sysctl.conf net.core.default_qdisc=fq net.ipv4.tcp_congestion_control=bbr Then save the file and reload the settings. sudo sysctl -p Check the changes by running the next command. sudo sysctl net.ipv4.tcp_congestion_control If the output is as follows the setting was applied successfully. net.ipv4.tcp_congestion_control = bbr These optimisations should help alleviate any possible performance issues. ↩︎ ","date":"2022-03-09","objectID":"/2022-03-09-shadowsocks/:6:1","tags":["shadowsocks","vpn"],"title":"shadowsocks 服务端安装指南","uri":"/2022-03-09-shadowsocks/"},{"categories":null,"content":" 所有的教程都不如官网。 ","date":"2022-03-08","objectID":"/2022-03-08-v2ray/:0:0","tags":["v2ray","vpn"],"title":"V2Ray 搭建指南","uri":"/2022-03-08-v2ray/"},{"categories":null,"content":"官网 官网：V2Fly.org github：v2fly/v2ray-core: A platform for building proxies to bypass network restrictions. (github.com) 以下是旧的官网和github： 官网：Project V · Project V 官方网站 (v2ray.com) github：v2ray/v2ray-core: A platform for building proxies to bypass network restrictions. (github.com) 注意，旧版本的安装脚本已废弃。 ","date":"2022-03-08","objectID":"/2022-03-08-v2ray/:1:0","tags":["v2ray","vpn"],"title":"V2Ray 搭建指南","uri":"/2022-03-08-v2ray/"},{"categories":null,"content":"安装 使用Linux安装脚本： v2fly/fhs-install-v2ray: Bash script for installing V2Ray in Linux that support systemd (github.com) 该脚本在运行时会提供 info 和 error 等信息，请仔细阅读。 ","date":"2022-03-08","objectID":"/2022-03-08-v2ray/:2:0","tags":["v2ray","vpn"],"title":"V2Ray 搭建指南","uri":"/2022-03-08-v2ray/"},{"categories":null,"content":"安装和更新 V2Ray // 安装可执行文件和 .dat 数据文件 # bash \u003c(curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh) ","date":"2022-03-08","objectID":"/2022-03-08-v2ray/:2:1","tags":["v2ray","vpn"],"title":"V2Ray 搭建指南","uri":"/2022-03-08-v2ray/"},{"categories":null,"content":"安装最新发行的 geoip.dat 和 geosite.dat // 只更新 .dat 数据文件 # bash \u003c(curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-dat-release.sh) ","date":"2022-03-08","objectID":"/2022-03-08-v2ray/:2:2","tags":["v2ray","vpn"],"title":"V2Ray 搭建指南","uri":"/2022-03-08-v2ray/"},{"categories":null,"content":"移除 V2Ray # bash \u003c(curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh) --remove 我的安装日志： # 先切换到root $ sudo su # 执行 root@ubuntu:~# bash \u003c(curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh) % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 21647 100 21647 0 0 1321k 0 --:--:-- --:--:-- --:--:-- 1321k info: Installing V2Ray v4.44.0 for aarch64 Downloading V2Ray archive: https://github.com/v2fly/v2ray-core/releases/download/v4.44.0/v2ray-linux-arm64-v8a.zip % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 664 100 664 0 0 2055 0 --:--:-- --:--:-- --:--:-- 2055 100 12.4M 100 12.4M 0 0 3138k 0 0:00:04 0:00:04 --:--:-- 4019k Downloading verification file for V2Ray archive: https://github.com/v2fly/v2ray-core/releases/download/v4.44.0/v2ray-linux-arm64-v8a.zip.dgst info: Extract the V2Ray package to /tmp/tmp.A891dl5AVC and prepare it for installation. info: Systemd service files have been installed successfully! warning: The following are the actual parameters for the v2ray service startup. warning: Please make sure the configuration file path is correctly set. # /etc/systemd/system/v2ray.service [Unit] Description=V2Ray Service Documentation=https://www.v2fly.org/ After=network.target nss-lookup.target [Service] User=nobody CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE AmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE NoNewPrivileges=true ExecStart=/usr/local/bin/v2ray -config /usr/local/etc/v2ray/config.json Restart=on-failure RestartPreventExitStatus=23 [Install] WantedBy=multi-user.target # /etc/systemd/system/v2ray.service.d/10-donot_touch_single_conf.conf # In case you have a good reason to do so, duplicate this file in the same directory and make your customizes there. # Or all changes you made will be lost! # Refer: https://www.freedesktop.org/software/systemd/man/systemd.unit.html [Service] ExecStart= ExecStart=/usr/local/bin/v2ray -config /usr/local/etc/v2ray/config.json installed: /usr/local/bin/v2ray installed: /usr/local/bin/v2ctl installed: /usr/local/share/v2ray/geoip.dat installed: /usr/local/share/v2ray/geosite.dat installed: /usr/local/etc/v2ray/config.json installed: /var/log/v2ray/ installed: /var/log/v2ray/access.log installed: /var/log/v2ray/error.log installed: /etc/systemd/system/v2ray.service installed: /etc/systemd/system/v2ray@.service removed: /tmp/tmp.A891dl5AVC info: V2Ray v4.44.0 is installed. You may need to execute a command to remove dependent software: apt purge curl unzip Please execute the command: systemctl enable v2ray; systemctl start v2ray root@instance-20220307-2119:/home/ubuntu/v2ray# systemctl status v2ray ● v2ray.service - V2Ray Service Loaded: loaded (/etc/systemd/system/v2ray.service; disabled; vendor preset: enabled) Drop-In: /etc/systemd/system/v2ray.service.d └─10-donot_touch_single_conf.conf Active: inactive (dead) Docs: https://www.v2fly.org/ ","date":"2022-03-08","objectID":"/2022-03-08-v2ray/:2:3","tags":["v2ray","vpn"],"title":"V2Ray 搭建指南","uri":"/2022-03-08-v2ray/"},{"categories":null,"content":"配置 官方给了模板：v2fly/v2ray-examples: v2ray-core 的模板们 (github.com) 如果想了解更多，还有一份详细文档：V2Ray 配置指南 | 新 V2Ray 白话文指南 (v2fly.org) ","date":"2022-03-08","objectID":"/2022-03-08-v2ray/:3:0","tags":["v2ray","vpn"],"title":"V2Ray 搭建指南","uri":"/2022-03-08-v2ray/"},{"categories":null,"content":"一份简单的配置 来源：VMess | 新 V2Ray 白话文指南 (v2fly.org) 服务端：配置文件位于/usr/local/etc/v2ray/config.json { \"inbounds\": [ { \"port\": 16823, // 服务器监听端口 \"protocol\": \"vmess\", // 主传入协议 \"settings\": { \"clients\": [ { \"id\": \"b831381d-6324-4d53-ad4f-8cda48b30811\", // 用户 ID，客户端与服务器必须相同 \"alterId\": 0 // 新版本不能设置为64 } ] } } ], \"outbounds\": [ { \"protocol\": \"freedom\", // 主传出协议 \"settings\": {} } ] } 客户端 { \"inbounds\": [ { \"port\": 1080, // 监听端口 \"protocol\": \"socks\", // 入口协议为 SOCKS 5 \"sniffing\": { \"enabled\": true, \"destOverride\": [\"http\", \"tls\"] }, \"settings\": { \"auth\": \"noauth\" //socks的认证设置，noauth 代表不认证，由于 socks 通常在客户端使用，所以这里不认证 } } ], \"outbounds\": [ { \"protocol\": \"vmess\", // 出口协议 \"settings\": { \"vnext\": [ { \"address\": \"serveraddr.com\", // 服务器地址，请修改为你自己的服务器 IP 或域名 \"port\": 16823, // 服务器端口 \"users\": [ { \"id\": \"b831381d-6324-4d53-ad4f-8cda48b30811\", // 用户 ID，必须与服务器端配置相同 \"alterId\": 0 // 此处的值也应当与服务器相同 } ] } ] } } ] } ","date":"2022-03-08","objectID":"/2022-03-08-v2ray/:3:1","tags":["v2ray","vpn"],"title":"V2Ray 搭建指南","uri":"/2022-03-08-v2ray/"},{"categories":null,"content":"如何生成 UUID 在线生成器：Online UUID Generator Tool Linux 命令生成：cat /proc/sys/kernel/random/uuid 版本 对于“变体（variants）1”和“变体2”，标准中定义了五个版本（versions），并且在特定用例中每个版本可能比其他版本更合适。 版本由 M 字符串中指示。 版本1 - UUID 是根据时间和 节点ID（通常是MAC地址）生成； 版本2 - UUID是根据标识符（通常是组或用户ID）、时间和节点ID生成； 版本3、版本5 - 确定性UUID 通过散列（hashing）名字空间（namespace）标识符和名称生成； 版本4 - UUID 使用随机性或伪随机性生成。 —— 来源：通用唯一识别码 - 维基百科，自由的百科全书 (wikipedia.org) ","date":"2022-03-08","objectID":"/2022-03-08-v2ray/:3:2","tags":["v2ray","vpn"],"title":"V2Ray 搭建指南","uri":"/2022-03-08-v2ray/"},{"categories":null,"content":"如何选择配置方案 官方的这个图真的太皮了，特意拿过来： ","date":"2022-03-08","objectID":"/2022-03-08-v2ray/:3:3","tags":["v2ray","vpn"],"title":"V2Ray 搭建指南","uri":"/2022-03-08-v2ray/"},{"categories":null,"content":"运行 sudo systemctl start v2ray 开机自启： sudo systemctl enable v2ray.service Created symlink /etc/systemd/system/multi-user.target.wants/v2ray.service → /etc/systemd/system/v2ray.service. 本文同步发布于： https://whuwangyong.github.io/2022-03-08-v2ray/ https://whuwangyong.netlify.app/2022-03-08-v2ray/ https://whuwangyong.vercel.app/2022-03-08-v2ray/ ","date":"2022-03-08","objectID":"/2022-03-08-v2ray/:4:0","tags":["v2ray","vpn"],"title":"V2Ray 搭建指南","uri":"/2022-03-08-v2ray/"},{"categories":null,"content":"关于本站 ","date":"0001-01-01","objectID":"/about/:1:0","tags":null,"title":"Hi，欢迎登船","uri":"/about/"},{"categories":null,"content":"缘起 呃，这是我的第几个博客了…… 第1个是中学时期的QQ空间。 第2个是刚上大学开始写的新浪博客，2010年前后，新浪博客如火如荼。这个博客当做日记本在用，记录了很多和同学、朋友、女朋友的事情。 第3个也是新浪博客。由于上一个新浪博客是个情感博客，不太好拿出去和别人交流，因此新开一个技术博客。这个博客写了很长时间，一直到2015年。共有299篇，18万访问，博客等级17级。 第4个博客是博客园(传送门)，第一篇是写于2013年3月5日的如何实现手机和PC用NFC通信，一晃9年过去了。至今有184篇，32万访问。同时期还开了一个CSDN的博客，比较后更喜欢博客园的调性，因此CSDN上只写过一篇。 从2018年开始，博客更新很慢，一年三五篇。因为都记录在有道云笔记了，写博客是要发布的，没有写笔记那么随意。 第5-7个博客都是搭在github pages上的，此站的前身。分别是用Hexo、Hugo、Jekyll构建的，都已经铲掉了。但是文章都在保留在笔记软件内。铁打的笔记，流水的博客。现在（2022-04-03）又回到了Hugo，决定不再折腾，认真写内容。 这次重新开博，导火索是博客园被整顿了，根本原因是写的笔记只能自己看（甚至自己都不看，写了就写了），不能像博客那样与人交流，共同进步。比起写笔记，写博客更正式，更能锻炼写作能力——四年不怎么写东西了，发现现在话都说不明白了…… ","date":"0001-01-01","objectID":"/about/:1:1","tags":null,"title":"Hi，欢迎登船","uri":"/about/"},{"categories":null,"content":"部署 本站在三个地方都有部署，您可以选择一个访问速度最快的进行使用。 github.io netlify.app vercel.app ","date":"0001-01-01","objectID":"/about/:1:2","tags":null,"title":"Hi，欢迎登船","uri":"/about/"},{"categories":null,"content":"关于我 重庆18年 + 武汉7年 + 深圳5+年 = 30+岁 C + C++ + C# + Java + Python + Linux + Kafka + Zookeeper + SpringBoot = 啥也不会 Bilibili + 公众号 + 小视频 + 知乎 + 抖音 + 相机 = 想搞点内容创作 基金 + 中概互联 + 2022 = 老乡别走 \u0026 关灯吃面 发福 + 弱鸡 = 早睡早起 \u0026 少吃多动 写于 深圳 2022.3 ","date":"0001-01-01","objectID":"/about/:2:0","tags":null,"title":"Hi，欢迎登船","uri":"/about/"},{"categories":null,"content":"特别 好基友的菜园子 ","date":"0001-01-01","objectID":"/links/:1:0","tags":null,"title":"友情链接","uri":"/links/"},{"categories":null,"content":"你看看人家 工程师，而立已婚有娃，宅叔一枚，着迷于所有看起来很酷很性感的东西 欧阳荣 ","date":"0001-01-01","objectID":"/links/:2:0","tags":null,"title":"友情链接","uri":"/links/"}]