<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>武大路飞</title>
    <link>https://whuwangyong.github.io/</link>
    <description>武大路飞的博客</description>
    <generator>Hugo -- gohugo.io</generator><managingEditor>whuwangyong@gmail.com (Wang Yong)</managingEditor>
      <webMaster>whuwangyong@gmail.com (Wang Yong)</webMaster><lastBuildDate>Fri, 10 Mar 2023 00:00:00 &#43;0800</lastBuildDate>
      <atom:link href="https://whuwangyong.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
  <title>【常识系列】HashMap的查询性能（百万级每秒）</title>
  <link>https://whuwangyong.github.io/2023-03-10-hashmap-query-performance/</link>
  <pubDate>Fri, 10 Mar 2023 00:00:00 &#43;0800</pubDate>
  <author>Wang Yong</author>
  <guid>https://whuwangyong.github.io/2023-03-10-hashmap-query-performance/</guid>
  <description><![CDATA[常识系列旨在让程序员对一些常见的计算机知识有一个数值上的理解，比如，mysql的一个insert耗时是多少，ssd的顺序写速度是多少，HashMap每秒可以做多少次查询？有了这些常识，在设计系统或者算法的时候，能更准确的预估其上限和下限。 点]]></description>
</item>
<item>
  <title>【常识系列】MySQL insert 性能（单条1ms）</title>
  <link>https://whuwangyong.github.io/2023-03-10-mysql-insert-performance/</link>
  <pubDate>Fri, 10 Mar 2023 00:00:00 &#43;0800</pubDate>
  <author>Wang Yong</author>
  <guid>https://whuwangyong.github.io/2023-03-10-mysql-insert-performance/</guid>
  <description><![CDATA[常识系列旨在让程序员对一些常见的计算机知识有一个数值上的理解，比如，mysql的一个insert耗时是多少，ssd的顺序写速度是多少，HashMap每秒可以做多少次查询？有了这些常识，在设计系统或者算法的时候，能更准确的预估其上限和下限。 点]]></description>
</item>
<item>
  <title>Kafka transaction hanging causes consumer to stuck</title>
  <link>https://whuwangyong.github.io/2022-11-17-kafka-transaction-hanging-causes-consumer-to-stuck/</link>
  <pubDate>Thu, 17 Nov 2022 00:00:00 &#43;0800</pubDate>
  <author>Wang Yong</author>
  <guid>https://whuwangyong.github.io/2022-11-17-kafka-transaction-hanging-causes-consumer-to-stuck/</guid>
  <description><![CDATA[Kafka事务未关闭导致消费者无法消费消息。 背景 最近遇到一个问题：有一个公用topic，很多应用都读写这个topic。从某个时间点开始，所有消费该topic的消费者（read_committed级别）都拉不到消息了。随机看了一些应用的日志，]]></description>
</item>
<item>
  <title>protostuff deserialize empty collection null</title>
  <link>https://whuwangyong.github.io/2022-11-17-protostuff-deserialize-empty-collection-null/</link>
  <pubDate>Thu, 17 Nov 2022 00:00:00 &#43;0800</pubDate>
  <author>Wang Yong</author>
  <guid>https://whuwangyong.github.io/2022-11-17-protostuff-deserialize-empty-collection-null/</guid>
  <description><![CDATA[protostuff反序列化空集合为null。 问题描述 有一个class A，含一个集合字段。创建对象时，如果集合字段赋值empty（不是null），那么反序列化后该字段变为null。 1 2 3 4 5 6 7 8 9 10 11 12 public class A { List&lt;Object&gt; lo; String name; } A a = new A(); a.setLo(new ArrarList&lt;&gt;()); a.setName(&#34;a&#34;); var]]></description>
</item>
<item>
  <title>思源笔记与logseq在PDF标注上的体验</title>
  <link>https://whuwangyong.github.io/2022-10-07-pdf-reading-on-siyuan-note-and-logseq/</link>
  <pubDate>Fri, 07 Oct 2022 00:00:00 &#43;0800</pubDate>
  <author>Wang Yong</author>
  <guid>https://whuwangyong.github.io/2022-10-07-pdf-reading-on-siyuan-note-and-logseq/</guid>
  <description><![CDATA[版本：思源2.2.3，logseq 0.8.8 功能对比 功能 思源 logseq 目录/书签 Y Y 高亮、批注、矩形选择 Y Y 页面缩放、跳转 Y Y 关键字搜索 Y N 高亮内容自动添加到笔记 N Y 笔记与PDF原文之间互相跳转 Y Y logseq的明显短板是没有全文搜索，这个应该不难，不知道]]></description>
</item>
<item>
  <title>使用statcounter做访问统计</title>
  <link>https://whuwangyong.github.io/2022-09-29-use-statcounter-to-get-access-statistics/</link>
  <pubDate>Thu, 29 Sep 2022 00:00:00 &#43;0800</pubDate>
  <author>Wang Yong</author>
  <guid>https://whuwangyong.github.io/2022-09-29-use-statcounter-to-get-access-statistics/</guid>
  <description><![CDATA[使用statcounter做访问统计 先看效果 博客园： ​ github.io： ​ statcounter后台： ​ 没啥访问量，见笑了…… 如何实现 本质是将statcounter生成的一段代码，放到自己的网站上就可以了。 注册并生成代码 注册，新建proj]]></description>
</item>
<item>
  <title>如何确保kafka topic已经删除</title>
  <link>https://whuwangyong.github.io/2022-09-21-how-to-ensure-kafka-topics-deleted/</link>
  <pubDate>Wed, 21 Sep 2022 00:00:00 &#43;0800</pubDate>
  <author>Wang Yong</author>
  <guid>https://whuwangyong.github.io/2022-09-21-how-to-ensure-kafka-topics-deleted/</guid>
  <description><![CDATA[问题描述 TopicExistsException: Topic &lsquo;xxx&rsquo; is marked for deletion. 在写kafka工具时，有两个方法：批量创建topic和批量删除topic。 运维操作一般是，批量删除一堆topic，然后再重建删除的那些topic。在创建时，可能会遇到如下错误： 1 2 3 4 5 6 7 8 2022-09-19 08:37:55.150 INFO 20376 --- [nio-8080-exec-4] c.w.w.k.service.TopicManagerImpl : input topics num: 100, deleted]]></description>
</item>
<item>
  <title>在consumer producer运行时停止kafka服务端会怎样</title>
  <link>https://whuwangyong.github.io/2022-09-18-stop-kafka-server-when-consumer-or-producer-running/</link>
  <pubDate>Sun, 18 Sep 2022 00:00:00 &#43;0800</pubDate>
  <author>Wang Yong</author>
  <guid>https://whuwangyong.github.io/2022-09-18-stop-kafka-server-when-consumer-or-producer-running/</guid>
  <description><![CDATA[结论 服务端停止时，客户端程序会报错； 服务端启动后，客户端程序能继续运行。也就是，消费者线程并未异常退出。 实验步骤 （1）停止后，consumer和producer会报错。 消费者： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32]]></description>
</item>
<item>
  <title>在producer consumer运行时删除topic会怎么样</title>
  <link>https://whuwangyong.github.io/2022-09-18-delete-topic-when-consumer-or-producer-running/</link>
  <pubDate>Sun, 18 Sep 2022 00:00:00 &#43;0800</pubDate>
  <author>Wang Yong</author>
  <guid>https://whuwangyong.github.io/2022-09-18-delete-topic-when-consumer-or-producer-running/</guid>
  <description><![CDATA[broker端有个参数（kafka_2.13-3.2.1/config/server.properties），auto.create.topics.enable，默认为true。意思是，当生产者、消费者读写一个不存在的topic时，是否自动]]></description>
</item>
<item>
  <title>如何在Spring Boot代码中执行sql脚本</title>
  <link>https://whuwangyong.github.io/2022-08-24-how-to-execute-sql-script-in-spring-boot/</link>
  <pubDate>Wed, 24 Aug 2022 00:00:00 &#43;0800</pubDate>
  <author>Wang Yong</author>
  <guid>https://whuwangyong.github.io/2022-08-24-how-to-execute-sql-script-in-spring-boot/</guid>
  <description><![CDATA[在spring应用运行时，有一些建表语句，或则初始化数据，需要从sql脚本导入。 本文推荐以下两种方法。 假设脚本位于/resources/ddl.sql 1 使用@sql注解 该注解可用于类和方法。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 @Sql(scripts = {&#34;/ddl.sql&#34;}, config = @SqlConfig(encoding =]]></description>
</item>
</channel>
</rss>
