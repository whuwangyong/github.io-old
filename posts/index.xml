<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>所有文章 - 武大路飞</title>
    <link>https://whuwangyong.github.io/posts/</link>
    <description>所有文章 | 武大路飞</description>
    <generator>Hugo -- gohugo.io</generator><managingEditor>whuwangyong@gmail.com (Wang Yong)</managingEditor>
      <webMaster>whuwangyong@gmail.com (Wang Yong)</webMaster><lastBuildDate>Thu, 28 Apr 2022 00:00:00 &#43;0800</lastBuildDate><atom:link href="https://whuwangyong.github.io/posts/" rel="self" type="application/rss+xml" /><item>
  <title>使用API提交URL到百度和Bing</title>
  <link>https://whuwangyong.github.io/2022-04-28-submit-urls-to-baidu-and-bing-with-api/</link>
  <pubDate>Thu, 28 Apr 2022 00:00:00 &#43;0800</pubDate>
  <author>Wang Yong</author>
  <guid>https://whuwangyong.github.io/2022-04-28-submit-urls-to-baidu-and-bing-with-api/</guid>
  <description><![CDATA[建站之后，为了文章能够被搜索引擎收录，我们需要将站点提交到Google、百度、Bing等搜索网站，通过验证之后，搜索引擎才会去我们的网站爬数据。 为了方便爬虫爬取我们站点里的文章，我们可以将站点地图（sitemap.xml）提交到搜索网站。提]]></description>
</item><item>
  <title>使用python爬取jar包、npm包、go包的最新版本</title>
  <link>https://whuwangyong.github.io/2022-04-28-crawl-latest-version-for-jar-npm-go-pkg/</link>
  <pubDate>Thu, 28 Apr 2022 00:00:00 &#43;0800</pubDate>
  <author>Wang Yong</author>
  <guid>https://whuwangyong.github.io/2022-04-28-crawl-latest-version-for-jar-npm-go-pkg/</guid>
  <description><![CDATA[场景 公司内网有maven仓库，扫描之后发现很多组件有漏洞，主要是因为版本太老。因此需要将这些漏洞组件的最新版导入内部的maven私服。 问题 这么多漏洞组件，一个个去中央仓库找最新版，显然不科学。因此要整个脚本来做这件事情。 方案 众所周知，jar]]></description>
</item><item>
  <title>Linux CPU 性能测试</title>
  <link>https://whuwangyong.github.io/2022-04-27-linux-cpu-benchmark/</link>
  <pubDate>Wed, 27 Apr 2022 00:00:00 &#43;0800</pubDate>
  <author>Wang Yong</author>
  <guid>https://whuwangyong.github.io/2022-04-27-linux-cpu-benchmark/</guid>
  <description><![CDATA[sysbench Sysbench is mainly intended for doing database benchmarking. However it includes options to test CPU, memory and file throughput as well. 安装 1 sudo apt install sysbench 使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 ubuntu@instance:~$ sysbench cpu --threads=3 run sysbench 1.0.18 (using system LuaJIT 2.1.0-beta3) Running the test with following options: Number of threads: 3 Initializing random number generator from current time Prime numbers limit: 10000 Initializing worker threads... Threads started! CPU speed: events per second: 10519.03 General statistics: total time: 10.0003s total number of events: 105208 Latency (ms): min: 0.28 avg:]]></description>
</item><item>
  <title>使用 Hugo &#43; Github Pages 创建静态网站博客</title>
  <link>https://whuwangyong.github.io/2022-04-19-hugo/</link>
  <pubDate>Tue, 19 Apr 2022 00:00:00 &#43;0800</pubDate>
  <author>Wang Yong</author>
  <guid>https://whuwangyong.github.io/2022-04-19-hugo/</guid>
  <description><![CDATA[最好的参考资料仍然是官方。本文仅作一个基本描述 安装 Hugo 在此处下载安装包。有两个版本：（1）hugo；（2）hugo_extended。怎么选？很多功能，包括一些主题，都需要 hugo_extended 的支持，因此，建议安装 hugo_extended。下载之后，解压，将]]></description>
</item><item>
  <title>Vercel关闭评论 禁止Preview Deployments</title>
  <link>https://whuwangyong.github.io/2022-03-31-vercel-disable-comments-and-preview-deployments/</link>
  <pubDate>Thu, 31 Mar 2022 00:00:00 &#43;0800</pubDate>
  <author>Wang Yong</author>
  <guid>https://whuwangyong.github.io/2022-03-31-vercel-disable-comments-and-preview-deployments/</guid>
  <description><![CDATA[关键字：disable Vercel bot; disable Preview Deployments Vercel是一个支持部署前端框架和静态网站的平台。你可以方便的把 Github Pages 上面的站点导入Vercel，这样做有两个好处： 有些地区有些时候，Vercel上面的站点比Github Pages上的访问速度快； Github Pages 屏蔽了百]]></description>
</item><item>
  <title>Github SubModule 指南</title>
  <link>https://whuwangyong.github.io/2022-03-29-github-submodule/</link>
  <pubDate>Tue, 29 Mar 2022 00:00:00 &#43;0800</pubDate>
  <author>Wang Yong</author>
  <guid>https://whuwangyong.github.io/2022-03-29-github-submodule/</guid>
  <description><![CDATA[最近学习使用 Hugo 构建静态网站。安装主题时，接触到git submodule这个命令，踩了些坑，总结一下。 子模块与父模块如何同步更新 子模块是一个单独的项目，commit push等操作需要在子模块自己的repo目录下操作。父项目的操作与子模块无关。]]></description>
</item><item>
  <title>云笔记软件简评</title>
  <link>https://whuwangyong.github.io/2022-03-08-notesapp_benchmark/</link>
  <pubDate>Tue, 29 Mar 2022 00:00:00 &#43;0800</pubDate>
  <author>Wang Yong</author>
  <guid>https://whuwangyong.github.io/2022-03-08-notesapp_benchmark/</guid>
  <description><![CDATA[本文首发V2EX。 这段时间试用了好多笔记软件，我本来就是个选择困难症，一个个试下来，愁死我了。 分享一下我的一些阶段性结论。 有道 缺点： 编辑器有问题，Ctrl+Home/End无法跳转、table键无法切换单元格、光标移动慢等问题 富文本不能导出]]></description>
</item><item>
  <title>使用Jekyll &#43; Github Pages搭建静态网站</title>
  <link>https://whuwangyong.github.io/2022-03-29-jekyll/</link>
  <pubDate>Tue, 29 Mar 2022 00:00:00 &#43;0800</pubDate>
  <author>Wang Yong</author>
  <guid>https://whuwangyong.github.io/2022-03-29-jekyll/</guid>
  <description><![CDATA[Jekyll 是 Github Pages 官方支持的静态网站生成工具，优点是在可以直接github上使用vscode online编辑md，提交后，github会承担生成html的工作。而使用hugo等工具，需要先在本地将md文件渲染成html，然后上传。 提示 hugo的优点是]]></description>
</item><item>
  <title>Windows和Linux的不同换行符导致脚本执行异常</title>
  <link>https://whuwangyong.github.io/2022-03-13-linebreak-in-windows-and-linux/</link>
  <pubDate>Sun, 13 Mar 2022 00:00:00 &#43;0800</pubDate>
  <author>Wang Yong</author>
  <guid>https://whuwangyong.github.io/2022-03-13-linebreak-in-windows-and-linux/</guid>
  <description><![CDATA[问题描述 有一个配置文件 config： 1 2 KAFKA_HOME=/home/wy/dev/kafka_2.13-2.6.0 BOOTSTRAP_SERVER=127.0.0.1:9092 另有一个使用该配置文件的脚本 list-topics.sh： 1 2 3 4 #!/bin/bash . config &#34;$KAFKA_HOME&#34;/bin/kafka-topics.sh --bootstrap-server &#34;$BOOTSTRAP_SERVER&#34; --list 我使用虚拟机Ubuntu挂载Windows分区，执行在Windows环境下编写的脚本，提示： 1 2 wy@ship:/mnt/hgfs/D/projects/kafka-mate/scripts$ ./list-topics.sh /bin/kafka-topics.sh: No such file or directory13-2.6.0 解决]]></description>
</item><item>
  <title>shadowsocks 服务端安装指南</title>
  <link>https://whuwangyong.github.io/2022-03-09-shadowsocks/</link>
  <pubDate>Wed, 09 Mar 2022 00:00:00 &#43;0800</pubDate>
  <author>Wang Yong</author>
  <guid>https://whuwangyong.github.io/2022-03-09-shadowsocks/</guid>
  <description><![CDATA[官方地址： shadowsocks/shadowsocks-libev: Bug-fix-only libev port of shadowsocks. Future development moved to shadowsocks-rust (github.com) 旧地址，不再更新： shadowsocks/shadowsocks at master (github.com) clowwindy/shadowsocks-libev at master (github.com) 本文基于Ubuntu。 install 1 2 3 $ sudo apt install shadowsocks-libev ... Created symlink /etc/systemd/system/multi-user.target.wants/shadowsocks-libev.service → /lib/systemd/system/shadowsocks-libev.service. Configuration 官方文档说配置文件在这里： Edit your config.json file. By default, it&rsquo;s located in /usr/local/etc/shadowsocks-libev. 但我的不是。 编辑/etc/shadowsocks-libev/confi]]></description>
</item></channel>
</rss>
