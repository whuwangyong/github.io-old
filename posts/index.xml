<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>所有文章 - 武大路飞</title>
    <link>https://whuwangyong.github.io/posts/</link>
    <description>所有文章 | 武大路飞</description>
    <generator>Hugo -- gohugo.io</generator><managingEditor>whuwangyong@gmail.com (Wang Yong)</managingEditor>
      <webMaster>whuwangyong@gmail.com (Wang Yong)</webMaster><lastBuildDate>Mon, 22 Aug 2022 00:00:00 &#43;0800</lastBuildDate><atom:link href="https://whuwangyong.github.io/posts/" rel="self" type="application/rss+xml" /><item>
  <title>MySQL外键</title>
  <link>https://whuwangyong.github.io/2022-08-22-mysql-foreign-key/</link>
  <pubDate>Mon, 22 Aug 2022 00:00:00 &#43;0800</pubDate>
  <author>Wang Yong</author>
  <guid>https://whuwangyong.github.io/2022-08-22-mysql-foreign-key/</guid>
  <description><![CDATA[语法 在创建表的时候指定外键约束 1 2 3 4 5 6 7 8 9 10 CREATE TABLE 表名 ( column1 datatype null/not null, column2 datatype null/not null, ... CONSTRAINT 外键约束名 FOREIGN KEY (column1,column2,... column_n) REFERENCES 外键依赖的表 (column1,column2,...column_n) ON DELETE CASCADE--级联删除 ON UPDATE CASCADE--级联更新 ); 测试 有如下2个表： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 CREATE TABLE t_product]]></description>
</item><item>
  <title>Process Explorer检测弹窗广告的利器</title>
  <link>https://whuwangyong.github.io/2022-07-23-use-process-explorer-to-detect-ad-process/</link>
  <pubDate>Sat, 23 Jul 2022 00:00:00 &#43;0800</pubDate>
  <author>Wang Yong</author>
  <guid>https://whuwangyong.github.io/2022-07-23-use-process-explorer-to-detect-ad-process/</guid>
  <description><![CDATA[有时候电脑右下角、正中间弹出的广告，没有任何logo和落款，不知道是哪个软件搞的。这就好比挨了一拳，没看见出拳的人。 微软的一个大佬开发的 Process Explorer 功能强大，能解决这个问题。将工具栏上的瞄准镜拖动到广告弹窗上面即可。]]></description>
</item><item>
  <title>kafka consumer seek之后立即poll可能拉不到消息</title>
  <link>https://whuwangyong.github.io/2022-02-17-kafka-seek-poll/</link>
  <pubDate>Tue, 31 May 2022 00:00:00 &#43;0800</pubDate>
  <author>Wang Yong</author>
  <guid>https://whuwangyong.github.io/2022-02-17-kafka-seek-poll/</guid>
  <description><![CDATA[问题 有个需求，需要频繁seek到指定partition的指定offset，然后poll，且只poll一次，目的是为了快速将指定offset的消息拉取出来。 通常的poll写法是，将poll逻辑放在死循环里，第一次拉不到，第二次继续。如果off]]></description>
</item><item>
  <title>Kafka事务不完全指南</title>
  <link>https://whuwangyong.github.io/2022-05-30-kafka-tx/</link>
  <pubDate>Mon, 30 May 2022 00:00:00 &#43;0800</pubDate>
  <author>Wang Yong</author>
  <guid>https://whuwangyong.github.io/2022-05-30-kafka-tx/</guid>
  <description><![CDATA[Kafka的事务是什么 生产者往多个topic里面写消息，要么同时成功，要么同时失败。 为什么需要事务 消息系统有3种语义： 最多一次 最少一次 精确一次。Exactly Only Once 为了实现精确一次的语义，Kafka必须引入事务。如下图： 本应用从上游topic]]></description>
</item><item>
  <title>kafka offset为什么不连续</title>
  <link>https://whuwangyong.github.io/2022-05-20-why-kafka-offset-not-sequential/</link>
  <pubDate>Fri, 20 May 2022 00:00:00 &#43;0800</pubDate>
  <author>Wang Yong</author>
  <guid>https://whuwangyong.github.io/2022-05-20-why-kafka-offset-not-sequential/</guid>
  <description><![CDATA[why kafka offset not sequential 未使用事务时，至少一次语义，消息重发时，会占用offset 使用事务时，每次事务的commit/abort，都会往topic（每个分区？）写一个标志，这个标志会占用offset 官方并未提及offset是连续的 Reference [Solved] Kafka Streams does not increment offset by 1 when producing]]></description>
</item><item>
  <title>使用API提交博客文章的URL到百度和Bing</title>
  <link>https://whuwangyong.github.io/2022-04-28-submit-urls-to-baidu-and-bing-with-api/</link>
  <pubDate>Thu, 28 Apr 2022 00:00:00 &#43;0800</pubDate>
  <author>Wang Yong</author>
  <guid>https://whuwangyong.github.io/2022-04-28-submit-urls-to-baidu-and-bing-with-api/</guid>
  <description><![CDATA[建站之后，为了文章能够被搜索引擎收录，我们需要将站点提交到Google、百度、Bing等搜索网站，通过验证之后，搜索引擎才会去我们的网站爬数据。 为了方便爬虫爬取我们站点里的文章，我们可以将站点地图（sitemap.xml）提交到搜索网站。提]]></description>
</item><item>
  <title>使用python爬取jar包、npm包、go包的最新版本</title>
  <link>https://whuwangyong.github.io/2022-04-28-crawl-latest-version-for-jar-npm-go-pkg/</link>
  <pubDate>Thu, 28 Apr 2022 00:00:00 &#43;0800</pubDate>
  <author>Wang Yong</author>
  <guid>https://whuwangyong.github.io/2022-04-28-crawl-latest-version-for-jar-npm-go-pkg/</guid>
  <description><![CDATA[场景 公司内网有maven仓库，扫描之后发现很多组件有漏洞，主要是因为版本太老。因此需要将这些漏洞组件的最新版导入内部的maven私服。 问题 这么多漏洞组件，一个个去中央仓库找最新版，显然不科学。因此要整个脚本来做这件事情。 方案 众所周知，jar]]></description>
</item><item>
  <title>Linux CPU 性能测试</title>
  <link>https://whuwangyong.github.io/2022-04-27-linux-cpu-benchmark/</link>
  <pubDate>Wed, 27 Apr 2022 00:00:00 &#43;0800</pubDate>
  <author>Wang Yong</author>
  <guid>https://whuwangyong.github.io/2022-04-27-linux-cpu-benchmark/</guid>
  <description><![CDATA[sysbench Sysbench is mainly intended for doing database benchmarking. However it includes options to test CPU, memory and file throughput as well. 安装 1 sudo apt install sysbench 使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 ubuntu@instance:~$ sysbench cpu --threads=3 run sysbench 1.0.18 (using system LuaJIT 2.1.0-beta3) Running the test with following options: Number of threads: 3 Initializing random number generator from current time Prime numbers limit: 10000 Initializing worker threads... Threads started! CPU speed: events per second: 10519.03 General statistics: total time: 10.0003s total number of events: 105208 Latency (ms): min: 0.28 avg:]]></description>
</item><item>
  <title>使用 Hugo &#43; Github Pages 创建静态网站博客</title>
  <link>https://whuwangyong.github.io/2022-04-19-hugo/</link>
  <pubDate>Tue, 19 Apr 2022 00:00:00 &#43;0800</pubDate>
  <author>Wang Yong</author>
  <guid>https://whuwangyong.github.io/2022-04-19-hugo/</guid>
  <description><![CDATA[最好的参考资料仍然是官方。本文仅作一个基本描述 安装 Hugo 在此处下载安装包。有两个版本：（1）hugo；（2）hugo_extended。怎么选？很多功能，包括一些主题，都需要 hugo_extended 的支持，因此，建议安装 hugo_extended。下载之后，解压，将]]></description>
</item><item>
  <title>Vercel关闭评论 禁止Preview Deployments</title>
  <link>https://whuwangyong.github.io/2022-03-31-vercel-disable-comments-and-preview-deployments/</link>
  <pubDate>Thu, 31 Mar 2022 00:00:00 &#43;0800</pubDate>
  <author>Wang Yong</author>
  <guid>https://whuwangyong.github.io/2022-03-31-vercel-disable-comments-and-preview-deployments/</guid>
  <description><![CDATA[关键字：disable Vercel bot; disable Preview Deployments Vercel是一个支持部署前端框架和静态网站的平台。你可以方便的把 Github Pages 上面的站点导入Vercel，这样做有两个好处： 有些地区有些时候，Vercel上面的站点比Github Pages上的访问速度快； Github Pages 屏蔽了百]]></description>
</item></channel>
</rss>
